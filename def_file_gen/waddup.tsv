VirtualAlloc	KERNEL32$VirtualAlloc	WINBASEAPI void * WINAPI KERNEL32$VirtualAlloc (LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
VirtualFree	KERNEL32$VirtualFree	WINBASEAPI int WINAPI KERNEL32$VirtualFree (LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
LocalAlloc	KERNEL32$LocalAlloc	DECLSPEC_IMPORT HLOCAL WINAPI KERNEL32$LocalAlloc (UINT, SIZE_T);
LocalFree	KERNEL32$LocalFree	DECLSPEC_IMPORT HLOCAL WINAPI KERNEL32$LocalFree (HLOCAL);
HeapAlloc	KERNEL32$HeapAlloc	WINBASEAPI void * WINAPI KERNEL32$HeapAlloc (HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
HeapReAlloc	KERNEL32$HeapReAlloc	WINBASEAPI LPVOID WINAPI KERNEL32$HeapReAlloc (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
GetProcessHeap	KERNEL32$GetProcessHeap	WINBASEAPI HANDLE WINAPI KERNEL32$GetProcessHeap();
HeapFree	KERNEL32$HeapFree	WINBASEAPI BOOL WINAPI KERNEL32$HeapFree (HANDLE, DWORD, PVOID);
FormatMessageA	KERNEL32$FormatMessageA	WINBASEAPI DWORD WINAPI KERNEL32$FormatMessageA (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
WideCharToMultiByte	Kernel32$WideCharToMultiByte	WINBASEAPI int WINAPI Kernel32$WideCharToMultiByte (UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
FileTimeToLocalFileTime	KERNEL32$FileTimeToLocalFileTime	WINBASEAPI int WINAPI KERNEL32$FileTimeToLocalFileTime (CONST FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
FileTimeToSystemTime	KERNEL32$FileTimeToSystemTime	WINBASEAPI int WINAPI KERNEL32$FileTimeToSystemTime (CONST FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
GetDateFormatW	KERNEL32$GetDateFormatW	WINBASEAPI int WINAPI KERNEL32$GetDateFormatW (LCID Locale, DWORD dwFlags, CONST SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
GetSystemTimeAsFileTime	KERNEL32$GetSystemTimeAsFileTime	WINBASEAPI VOID WINAPI KERNEL32$GetSystemTimeAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
GetLocalTime	KERNEL32$GetLocalTime	WINBASEAPI VOID WINAPI KERNEL32$GetLocalTime (LPSYSTEMTIME lpSystemTime);
SystemTimeToFileTime	KERNEL32$SystemTimeToFileTime	WINBASEAPI WINBOOL WINAPI KERNEL32$SystemTimeToFileTime (CONST SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
SystemTimeToTzSpecificLocalTime	KERNEL32$SystemTimeToTzSpecificLocalTime	WINBASEAPI WINBOOL WINAPI KERNEL32$SystemTimeToTzSpecificLocalTime (CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation, CONST SYSTEMTIME *lpUniversalTime, LPSYSTEMTIME lpLocalTime);
GlobalMemoryStatusEx	KERNEL32$GlobalMemoryStatusEx	WINBASEAPI WINBOOL WINAPI KERNEL32$GlobalMemoryStatusEx (LPMEMORYSTATUSEX lpBuffer);
GetDiskFreeSpaceExA	KERNEL32$GetDiskFreeSpaceExA	WINBASEAPI WINBOOL WINAPI KERNEL32$GetDiskFreeSpaceExA (LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
GetCurrentProcess	KERNEL32$GetCurrentProcess	WINBASEAPI HANDLE WINAPI KERNEL32$GetCurrentProcess (VOID);
GetCurrentProcessId	KERNEL32$GetCurrentProcessId	DECLSPEC_IMPORT DWORD KERNEL32$GetCurrentProcessId(VOID);
GetLastError	KERNEL32$GetLastError	WINBASEAPI DWORD WINAPI KERNEL32$GetLastError (VOID);
CloseHandle	KERNEL32$CloseHandle	WINBASEAPI WINBOOL WINAPI KERNEL32$CloseHandle (HANDLE hObject);
CreateThread	KERNEL32$CreateThread	WINBASEAPI HANDLE WINAPI KERNEL32$CreateThread (LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
GetTickCount	KERNEL32$GetTickCount	WINBASEAPI DWORD WINAPI KERNEL32$GetTickCount (VOID);
GetTickCount64	KERNEL32$GetTickCount64	WINBASEAPI ULONGLONG WINAPI KERNEL32$GetTickCount64 (VOID);
CreateFiber	KERNEL32$CreateFiber	WINBASEAPI LPVOID WINAPI KERNEL32$CreateFiber (SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
ConvertThreadToFiber	KERNEL32$ConvertThreadToFiber	WINBASEAPI LPVOID WINAPI KERNEL32$ConvertThreadToFiber (LPVOID lpParameter);
ConvertFiberToThread	KERNEL32$ConvertFiberToThread	WINBASEAPI WINBOOL WINAPI KERNEL32$ConvertFiberToThread (VOID);
DeleteFiber	KERNEL32$DeleteFiber	WINBASEAPI VOID WINAPI KERNEL32$DeleteFiber (LPVOID lpFiber);
SwitchToFiber	KERNEL32$SwitchToFiber	WINBASEAPI VOID WINAPI KERNEL32$SwitchToFiber (LPVOID lpFiber);
WaitForSingleObject	KERNEL32$WaitForSingleObject	WINBASEAPI DWORD WINAPI KERNEL32$WaitForSingleObject (HANDLE hHandle, DWORD dwMilliseconds);
Sleep	KERNEL32$Sleep	WINBASEAPI VOID WINAPI KERNEL32$Sleep (DWORD dwMilliseconds);
DeleteFileW	KERNEL32$DeleteFileW	WINBASEAPI WINBOOL WINAPI KERNEL32$DeleteFileW (LPCWSTR lpFileName);
CreateFileW	KERNEL32$CreateFileW	WINBASEAPI HANDLE WINAPI KERNEL32$CreateFileW (LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
GetFileSize	KERNEL32$GetFileSize	WINBASEAPI DWORD WINAPI KERNEL32$GetFileSize (HANDLE hFile, LPDWORD lpFileSizeHigh);
ReadFile	KERNEL32$ReadFile	WINBASEAPI WINBOOL WINAPI KERNEL32$ReadFile (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
OpenProcess	KERNEL32$OpenProcess	WINBASEAPI HANDLE WINAPI KERNEL32$OpenProcess (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwProcessId);
GetComputerNameExW	KERNEL32$GetComputerNameExW	WINBASEAPI WINBOOL WINAPI KERNEL32$GetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
lstrlenW	KERNEL32$lstrlenW	WINBASEAPI int WINAPI KERNEL32$lstrlenW (LPCWSTR lpString);
lstrcatW	KERNEL32$lstrcatW	WINBASEAPI LPWSTR WINAPI KERNEL32$lstrcatW (LPWSTR lpString1, LPCWSTR lpString2);
lstrcpynW	KERNEL32$lstrcpynW	WINBASEAPI LPWSTR WINAPI KERNEL32$lstrcpynW (LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
GetFullPathNameW	KERNEL32$GetFullPathNameW	WINBASEAPI DWORD WINAPI KERNEL32$GetFullPathNameW (LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
GetFileAttributesW	KERNEL32$GetFileAttributesW	WINBASEAPI DWORD WINAPI KERNEL32$GetFileAttributesW (LPCWSTR lpFileName);
GetCurrentDirectoryW	KERNEL32$GetCurrentDirectoryW	WINBASEAPI DWORD WINAPI KERNEL32$GetCurrentDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);
FindFirstFileW	KERNEL32$FindFirstFileW	WINBASEAPI HANDLE WINAPI KERNEL32$FindFirstFileW (LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
FindFirstFileA	KERNEL32$FindFirstFileA	WINBASEAPI HANDLE WINAPI KERNEL32$FindFirstFileA (char * lpFileName, LPWIN32_FIND_DATA lpFindFileData);
FindNextFileW	KERNEL32$FindNextFileW	WINBASEAPI WINBOOL WINAPI KERNEL32$FindNextFileW (HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
FindNextFileA	KERNEL32$FindNextFileA	WINBASEAPI WINBOOL WINAPI KERNEL32$FindNextFileA (HANDLE hFindFile, LPWIN32_FIND_DATA lpFindFileData);
FindClose	KERNEL32$FindClose	WINBASEAPI WINBOOL WINAPI KERNEL32$FindClose (HANDLE hFindFile);
SetLastError	KERNEL32$SetLastError	WINBASEAPI VOID WINAPI KERNEL32$SetLastError (DWORD dwErrCode);
GlobalAlloc	KERNEL32$GlobalAlloc	DECLSPEC_IMPORT HGLOBAL KERNEL32$GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
GlobalFree	KERNEL32$GlobalFree	DECLSPEC_IMPORT HGLOBAL KERNEL32$GlobalFree(HGLOBAL hMem);
GetEnvironmentStrings	KERNEL32$GetEnvironmentStrings	DECLSPEC_IMPORT LPTCH WINAPI KERNEL32$GetEnvironmentStrings();
FreeEnvironmentStringsA	KERNEL32$FreeEnvironmentStringsA	DECLSPEC_IMPORT WINBASEAPI BOOL WINAPI KERNEL32$FreeEnvironmentStringsA(LPSTR);
ExpandEnvironmentStringsW	KERNEL32$ExpandEnvironmentStringsW	WINBASEAPI DWORD WINAPI KERNEL32$ExpandEnvironmentStringsW (LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
CreateToolhelp32Snapshot	KERNEL32$CreateToolhelp32Snapshot	WINBASEAPI HANDLE WINAPI KERNEL32$CreateToolhelp32Snapshot(DWORD dwFlags,DWORD th32ProcessID);
Process32First	KERNEL32$Process32First	WINBASEAPI WINBOOL WINAPI KERNEL32$Process32First(HANDLE hSnapshot,LPPROCESSENTRY32 lppe);
Process32Next	KERNEL32$Process32Next	WINBASEAPI WINBOOL WINAPI KERNEL32$Process32Next(HANDLE hSnapshot,LPPROCESSENTRY32 lppe);
Module32First	KERNEL32$Module32First	WINBASEAPI WINBOOL WINAPI KERNEL32$Module32First(HANDLE hSnapshot,LPMODULEENTRY32 lpme);
Module32Next	KERNEL32$Module32Next	WINBASEAPI WINBOOL WINAPI KERNEL32$Module32Next(HANDLE hSnapshot,LPMODULEENTRY32 lpme);
LoadLibraryA	KERNEL32$LoadLibraryA	WINBASEAPI HMODULE WINAPI KERNEL32$LoadLibraryA (LPCSTR lpLibFileName);
GetProcAddress	KERNEL32$GetProcAddress	WINBASEAPI FARPROC WINAPI KERNEL32$GetProcAddress (HMODULE hModule, LPCSTR lpProcName);
FreeLibrary	KERNEL32$FreeLibrary	WINBASEAPI WINBOOL WINAPI KERNEL32$FreeLibrary (HMODULE hLibModule);
lstrlenA	KERNEL32$lstrlenA	DECLSPEC_IMPORT WINBASEAPI int WINAPI KERNEL32$lstrlenA(LPCSTR);
GetLocaleInfoEx	KERNEL32$GetLocaleInfoEx	DECLSPEC_IMPORT int WINAPI KERNEL32$GetLocaleInfoEx(LPCWSTR lpLocaleName, LCTYPE LCType, LPWSTR lpLCData, int cchData);
GetSystemDefaultLocaleName	KERNEL32$GetSystemDefaultLocaleName	WINBASEAPI int WINAPI KERNEL32$GetSystemDefaultLocaleName(LPCWSTR lpLocaleName, int cchLocaleName);
LocaleNameToLCID	KERNEL32$LocaleNameToLCID	DECLSPEC_IMPORT LCID WINAPI KERNEL32$LocaleNameToLCID(LPCWSTR lpName, DWORD dwFlags);
GetDateFormatEx	KERNEL32$GetDateFormatEx	DECLSPEC_IMPORT int WINAPI KERNEL32$GetDateFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpData, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar);
WTSEnumerateSessionsA	WTSAPI32$WTSEnumerateSessionsA	DECLSPEC_IMPORT DWORD WINAPI WTSAPI32$WTSEnumerateSessionsA(LPVOID, DWORD, DWORD, PWTS_SESSION_INFO*, DWORD*);
WTSQuerySessionInformationA	WTSAPI32$WTSQuerySessionInformationA	DECLSPEC_IMPORT DWORD WINAPI WTSAPI32$WTSQuerySessionInformationA(LPVOID, DWORD, WTS_INFO_CLASS , LPSTR*, DWORD*);
WTSFreeMemory	WTSAPI32$WTSFreeMemory	DECLSPEC_IMPORT DWORD WINAPI WTSAPI32$WTSFreeMemory(PVOID);
GetAdaptersInfo	IPHLPAPI$GetAdaptersInfo	DECLSPEC_IMPORT DWORD WINAPI IPHLPAPI$GetAdaptersInfo(PIP_ADAPTER_INFO,PULONG);
GetIpForwardTable	IPHLPAPI$GetIpForwardTable	DECLSPEC_IMPORT DWORD WINAPI IPHLPAPI$GetIpForwardTable (PMIB_IPFORWARDTABLE pIpForwardTable, PULONG pdwSize, WINBOOL bOrder);
GetNetworkParams	IPHLPAPI$GetNetworkParams	DECLSPEC_IMPORT DWORD WINAPI IPHLPAPI$GetNetworkParams(PFIXED_INFO,PULONG);
GetUdpTable	IPHLPAPI$GetUdpTable	DECLSPEC_IMPORT ULONG WINAPI IPHLPAPI$GetUdpTable (PMIB_UDPTABLE UdpTable, PULONG SizePointer, WINBOOL Order);
GetTcpTable	IPHLPAPI$GetTcpTable	DECLSPEC_IMPORT ULONG WINAPI IPHLPAPI$GetTcpTable (PMIB_TCPTABLE TcpTable, PULONG SizePointer, WINBOOL Order);
GetIpNetTable	IPHLPAPI$GetIpNetTable	DECLSPEC_IMPORT ULONG WINAPI IPHLPAPI$GetIpNetTable(PMIB_IPNETTABLE IpNetTable,PULONG SizePointer, BOOL Order);
_ultoa	MSVCRT$_ultoa	WINBASEAPI char *__cdecl MSVCRT$_ultoa(unsigned long _Value,char *_Dest,int _Radix);
calloc	MSVCRT$calloc	WINBASEAPI void *__cdecl MSVCRT$calloc(size_t _NumOfElements, size_t _SizeOfElements);
memcpy	MSVCRT$memcpy	WINBASEAPI void *__cdecl MSVCRT$memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount);
memcmp	MSVCRT$memcmp	WINBASEAPI int __cdecl MSVCRT$memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
realloc	MSVCRT$realloc	WINBASEAPI void *__cdecl MSVCRT$realloc(void *_Memory, size_t _NewSize);
free	MSVCRT$free	WINBASEAPI void __cdecl MSVCRT$free(void *_Memory);
memset	MSVCRT$memset	WINBASEAPI void __cdecl MSVCRT$memset(void *dest, int c, size_t count);
sprintf	MSVCRT$sprintf	WINBASEAPI int __cdecl MSVCRT$sprintf(char *__stream, const char *__format, ...);
vsnprintf	MSVCRT$vsnprintf	WINBASEAPI int __cdecl MSVCRT$vsnprintf(char * __restrict__ d,size_t n,const char * __restrict__ format,va_list arg);
_snwprintf	MSVCRT$_snwprintf	WINBASEAPI int __cdecl MSVCRT$_snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...);
wcscpy_s	MSVCRT$wcscpy_s	WINBASEAPI errno_t __cdecl MSVCRT$wcscpy_s(wchar_t *_Dst, rsize_t _DstSize, const wchar_t *_Src);
wcslen	MSVCRT$wcslen	WINBASEAPI size_t __cdecl MSVCRT$wcslen(const wchar_t *_Str);
wcstombs	MSVCRT$wcstombs	WINBASEAPI size_t __cdecl MSVCRT$wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount);
wcscmp	MSVCRT$wcscmp	WINBASEAPI wchar_t *__cdecl MSVCRT$wcscmp(const wchar_t *_lhs,const wchar_t *_rhs);
wcstok	MSVCRT$wcstok	WINBASEAPI wchar_t *__cdecl MSVCRT$wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim);
wcstok_s	MSVCRT$wcstok_s	WINBASEAPI wchar_t *__cdecl MSVCRT$wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
wcsstr	MSVCRT$wcsstr	WINBASEAPI wchar_t *__cdecl MSVCRT$wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
wcscat	MSVCRT$wcscat	WINBASEAPI wchar_t *__cdecl MSVCRT$wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source);
wcsncat	MSVCRT$wcsncat	WINBASEAPI wchar_t *__cdecl MSVCRT$wcsncat(wchar_t * __restrict__ _Dest, const wchar_t * __restrict__ _Source, size_t _Count);
strncat	MSVCRT$strncat	WINBASEAPI wchar_t *__cdecl MSVCRT$strncat(char * __restrict__ _Dest,const char * __restrict__ _Source, size_t _Count);
wcscpy	MSVCRT$wcscpy	WINBASEAPI wchar_t *__cdecl MSVCRT$wcscpy(wchar_t * __restrict__ _Dest, const wchar_t * __restrict__ _Source);
_wcsicmp	MSVCRT$_wcsicmp	WINBASEAPI int __cdecl MSVCRT$_wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
_wcsnicmp	MSVCRT$_wcsnicmp	WINBASEAPI int __cdecl MSVCRT$_wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2, size_t _Count);
_strnicmp	MSVCRT$_strnicmp	WINBASEAPI int __cdecl MSVCRT$_strnicmp(const char *_Str1,const char *_Str2, size_t _Count);
wcschr	MSVCRT$wcschr	WINBASEAPI _CONST_RETURN wchar_t *__cdecl MSVCRT$wcschr(const wchar_t *_Str, wchar_t _Ch);
wcsrchr	MSVCRT$wcsrchr	WINBASEAPI wchar_t *__cdecl MSVCRT$wcsrchr(const wchar_t *_Str,wchar_t _Ch);
wcsrchr	MSVCRT$wcsrchr	WINBASEAPI wchar_t *__cdecl MSVCRT$wcsrchr(const wchar_t *_Str,wchar_t _Ch);
wcstoul	MSVCRT$wcstoul	WINBASEAPI unsigned long __cdecl MSVCRT$wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
strcat	MSVCRT$strcat	DECLSPEC_IMPORT char * __cdecl MSVCRT$strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
strnlen	MSVCRT$strnlen	WINBASEAPI size_t __cdecl MSVCRT$strnlen(const char *_Str,size_t _MaxCount);
strlen	MSVCRT$strlen	WINBASEAPI size_t __cdecl MSVCRT$strlen(const char *_Str);
strcmp	MSVCRT$strcmp	DECLSPEC_IMPORT int __cdecl MSVCRT$strcmp(const char *_Str1,const char *_Str2);
_stricmp	MSVCRT$_stricmp	DECLSPEC_IMPORT int __cdecl MSVCRT$_stricmp(const char *string1,const char *string2);
strncmp	MSVCRT$strncmp	WINBASEAPI int __cdecl MSVCRT$strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
strcpy	MSVCRT$strcpy	DECLSPEC_IMPORT char * __cdecl MSVCRT$strcpy(char * __restrict__ __dst, const char * __restrict__ __src);
strstr	MSVCRT$strstr	DECLSPEC_IMPORT PCHAR __cdecl MSVCRT$strstr(const char *haystack, const char *needle);
strchr	MSVCRT$strchr	DECLSPEC_IMPORT PCHAR __cdecl MSVCRT$strchr(const char *haystack, int needle);
strtok	MSVCRT$strtok	DECLSPEC_IMPORT char *__cdecl MSVCRT$strtok(char * __restrict__ _Str,const char * __restrict__ _Delim);
strtok_s	MSVCRT$strtok_s	_CRTIMP char *__cdecl MSVCRT$strtok_s(char *_Str,const char *_Delim,char **_Context);
strtoul	MSVCRT$strtoul	WINBASEAPI unsigned long __cdecl MSVCRT$strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
strftime	MSVCRT$strftime	WINBASEAPI size_t __cdecl MSVCRT$strftime(char *_DstBuf,size_t _SizeInBytes,const char *_Format,const struct tm *_Tm);
gmtime	MSVCRT$gmtime	WINBASEAPI struct tm * __cdecl MSVCRT$gmtime(const time_t *_Time);
wcsncat	MSVCRT$wcsncat	WINBASEAPI wchar_t * __cdecl MSVCRT$wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count);
DnsQuery_A	DNSAPI$DnsQuery_A	DECLSPEC_IMPORT DNS_STATUS WINAPI DNSAPI$DnsQuery_A(PCSTR,WORD,DWORD,PIP4_ARRAY,PDNS_RECORD*,PVOID*);
DnsFree	DNSAPI$DnsFree	DECLSPEC_IMPORT VOID WINAPI DNSAPI$DnsFree(PVOID pData,DNS_FREE_TYPE FreeType);
inet_addr	WSOCK32$inet_addr	DECLSPEC_IMPORT unsigned long __stdcall WSOCK32$inet_addr(const char *cp);
DsGetDcNameA	NETAPI32$DsGetDcNameA	DECLSPEC_IMPORT DWORD WINAPI NETAPI32$DsGetDcNameA(LPVOID, LPVOID, LPVOID, LPVOID, ULONG, LPVOID);
NetUserGetInfo	NETAPI32$NetUserGetInfo	WINBASEAPI DWORD WINAPI NETAPI32$NetUserGetInfo(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE *bufptr);
NetUserModalsGet	NETAPI32$NetUserModalsGet	WINBASEAPI DWORD WINAPI NETAPI32$NetUserModalsGet(LPCWSTR servername,DWORD level,LPBYTE *bufptr);
NetServerEnum	NETAPI32$NetServerEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetServerEnum(LMCSTR servername,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,DWORD servertype,LMCSTR domain,LPDWORD resume_handle);
NetUserGetGroups	NETAPI32$NetUserGetGroups	WINBASEAPI DWORD WINAPI NETAPI32$NetUserGetGroups(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries);
NetUserGetLocalGroups	NETAPI32$NetUserGetLocalGroups	WINBASEAPI DWORD WINAPI NETAPI32$NetUserGetLocalGroups(LPCWSTR servername,LPCWSTR username,DWORD level,DWORD flags,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries);
NetApiBufferFree	NETAPI32$NetApiBufferFree	WINBASEAPI DWORD WINAPI NETAPI32$NetApiBufferFree(LPVOID Buffer);
NetGetAnyDCName	NETAPI32$NetGetAnyDCName	WINBASEAPI DWORD WINAPI NETAPI32$NetGetAnyDCName(LPCWSTR servername,LPCWSTR domainname,LPBYTE *bufptr);
NetUserEnum	NETAPI32$NetUserEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetUserEnum(LPCWSTR servername,DWORD level,DWORD filter,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle);
NetGroupGetUsers	NETAPI32$NetGroupGetUsers	WINBASEAPI DWORD WINAPI NETAPI32$NetGroupGetUsers(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR ResumeHandle);
NetQueryDisplayInformation	NETAPI32$NetQueryDisplayInformation	WINBASEAPI DWORD WINAPI NETAPI32$NetQueryDisplayInformation(LPCWSTR ServerName,DWORD Level,DWORD Index,DWORD EntriesRequested,DWORD PreferredMaximumLength,LPDWORD ReturnedEntryCount,PVOID *SortedBuffer);
NetLocalGroupEnum	NETAPI32$NetLocalGroupEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetLocalGroupEnum(LPCWSTR servername,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR resumehandle);
NetLocalGroupGetMembers	NETAPI32$NetLocalGroupGetMembers	WINBASEAPI DWORD WINAPI NETAPI32$NetLocalGroupGetMembers(LPCWSTR servername,LPCWSTR localgroupname,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR resumehandle);
NetUserSetInfo	NETAPI32$NetUserSetInfo	WINBASEAPI DWORD WINAPI NETAPI32$NetUserSetInfo(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE buf,LPDWORD parm_err);
NetShareEnum	NETAPI32$NetShareEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetShareEnum(LMSTR servername,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle);
NetApiBufferFree	NETAPI32$NetApiBufferFree	WINBASEAPI DWORD WINAPI NETAPI32$NetApiBufferFree(LPVOID Buffer);
NetSessionEnum	NETAPI32$NetSessionEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetSessionEnum(LPCWSTR servername, LPCWSTR UncClientName, LPCWSTR username, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle);
NetWkstaUserEnum	NETAPI32$NetWkstaUserEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetWkstaUserEnum(LMSTR servername,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resumehandle);
NetWkstaGetInfo	NETAPI32$NetWkstaGetInfo	WINBASEAPI DWORD WINAPI NETAPI32$NetWkstaGetInfo(LMSTR servername,DWORD level,LPBYTE *bufptr);
NetStatisticsGet	NETAPI32$NetStatisticsGet	WINBASEAPI DWORD WINAPI NETAPI32$NetStatisticsGet(LMSTR server,LMSTR service,DWORD level,DWORD options,LPBYTE *bufptr);
NetRemoteTOD	NETAPI32$NetRemoteTOD	WINBASEAPI DWORD WINAPI NETAPI32$NetRemoteTOD(LPCWSTR UncServerName,LPBYTE  *BufferPtr);
WNetOpenEnumW	MPR$WNetOpenEnumW	WINBASEAPI DWORD WINAPI MPR$WNetOpenEnumW(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum);
WNetEnumResourceW	MPR$WNetEnumResourceW	WINBASEAPI DWORD WINAPI MPR$WNetEnumResourceW(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize);
WNetCloseEnum	MPR$WNetCloseEnum	WINBASEAPI DWORD WINAPI MPR$WNetCloseEnum(HANDLE hEnum);
WNetGetNetworkInformationW	MPR$WNetGetNetworkInformationW	WINBASEAPI DWORD WINAPI MPR$WNetGetNetworkInformationW(LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct);
WNetGetConnectionW	MPR$WNetGetConnectionW	WINBASEAPI DWORD WINAPI MPR$WNetGetConnectionW(LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength);
WNetGetResourceInformationW	MPR$WNetGetResourceInformationW	WINBASEAPI DWORD WINAPI MPR$WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR *lplpSystem);
WNetGetUserW	MPR$WNetGetUserW	WINBASEAPI DWORD WINAPI MPR$WNetGetUserW(LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength);
WNetAddConnection2W	MPR$WNetAddConnection2W	WINBASEAPI DWORD WINAPI MPR$WNetAddConnection2W(LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags);
WNetCancelConnection2W	MPR$WNetCancelConnection2W	WINBASEAPI DWORD WINAPI MPR$WNetCancelConnection2W(LPCWSTR lpName, DWORD dwFlags, BOOL fForce);
EnumDesktopWindows	USER32$EnumDesktopWindows	WINUSERAPI int WINAPI USER32$EnumDesktopWindows(HDESK hDesktop,WNDENUMPROC lpfn,LPARAM lParam);
IsWindowVisible	USER32$IsWindowVisible	WINUSERAPI int WINAPI USER32$IsWindowVisible (HWND hWnd);
GetWindowTextA	USER32$GetWindowTextA	WINUSERAPI int WINAPI USER32$GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount);
GetClassNameA	USER32$GetClassNameA	WINUSERAPI int WINAPI USER32$GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount);
CharPrevW	USER32$CharPrevW	WINUSERAPI LPWSTR WINAPI USER32$CharPrevW(LPCWSTR lpszStart,LPCWSTR lpszCurrent);
FindWindowExA	USER32$FindWindowExA	WINUSERAPI HWND WINAPI USER32$FindWindowExA (HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow);
SendMessageA	USER32$SendMessageA	WINUSERAPI LRESULT WINAPI USER32$SendMessageA (HWND hwnd, UINT Msg, WPARAM wParam, LPARAM lParam);
GetWindowTextA	USER32$GetWindowTextA	WINUSERAPI int WINAPI USER32$GetWindowTextA(HWND  hWnd, LPSTR lpString, int nMaxCount);
GetClassNameA	USER32$GetClassNameA	WINUSERAPI int WINAPI USER32$GetClassNameA(HWND hWnd, LPTSTR lpClassName, int nMaxCount);
EnumChildWindows	USER32$EnumChildWindows	WINUSERAPI BOOL WINAPI USER32$EnumChildWindows(HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
GetUserNameExA	SECUR32$GetUserNameExA	WINBASEAPI BOOLEAN WINAPI SECUR32$GetUserNameExA (int NameFormat, LPSTR lpNameBuffer, PULONG nSize);
StrStrIA	SHLWAPI$StrStrIA	WINBASEAPI LPSTR WINAPI SHLWAPI$StrStrIA(LPCSTR lpFirst,LPCSTR lpSrch);
SHFormatDateTimeA	SHLWAPI$SHFormatDateTimeA	WINBASEAPI int WINAPI SHLWAPI$SHFormatDateTimeA(const FILETIME *pft, DWORD *pdwFlags, LPSTR *pszBuf, UINT cchBuf);
OpenProcessToken	ADVAPI32$OpenProcessToken	WINADVAPI WINBOOL WINAPI ADVAPI32$OpenProcessToken (HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
GetTokenInformation	ADVAPI32$GetTokenInformation	WINADVAPI WINBOOL WINAPI ADVAPI32$GetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
ConvertSidToStringSidA	ADVAPI32$ConvertSidToStringSidA	WINADVAPI WINBOOL WINAPI ADVAPI32$ConvertSidToStringSidA(PSID Sid,LPSTR *StringSid);
ConvertStringSecurityDescriptorToSecurityDescriptorW	ADVAPI32$ConvertStringSecurityDescriptorToSecurityDescriptorW	WINADVAPI WINBOOL WINAPI ADVAPI32$ConvertStringSecurityDescriptorToSecurityDescriptorW(LPCWSTR StringSecurityDescriptor,DWORD StringSDRevision,PSECURITY_DESCRIPTOR *SecurityDescriptor,PULONG SecurityDescriptorSize);
LookupAccountSidA	ADVAPI32$LookupAccountSidA	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupAccountSidA (LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
LookupAccountSidW	ADVAPI32$LookupAccountSidW	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupAccountSidW (LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
LookupPrivilegeNameA	ADVAPI32$LookupPrivilegeNameA	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupPrivilegeNameA (LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
LookupPrivilegeDisplayNameA	ADVAPI32$LookupPrivilegeDisplayNameA	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupPrivilegeDisplayNameA (LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
OpenSCManagerA	ADVAPI32$OpenSCManagerA	WINADVAPI SC_HANDLE WINAPI ADVAPI32$OpenSCManagerA(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess);
OpenServiceA	ADVAPI32$OpenServiceA	WINADVAPI SC_HANDLE WINAPI ADVAPI32$OpenServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess);
QueryServiceStatus	ADVAPI32$QueryServiceStatus	WINADVAPI WINBOOL WINAPI ADVAPI32$QueryServiceStatus(SC_HANDLE hService,LPSERVICE_STATUS lpServiceStatus);
QueryServiceConfigA	ADVAPI32$QueryServiceConfigA	WINADVAPI WINBOOL WINAPI ADVAPI32$QueryServiceConfigA(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGA lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
CloseServiceHandle	ADVAPI32$CloseServiceHandle	WINADVAPI WINBOOL WINAPI ADVAPI32$CloseServiceHandle(SC_HANDLE hSCObject);
EnumServicesStatusExA	ADVAPI32$EnumServicesStatusExA	WINADVAPI WINBOOL WINAPI ADVAPI32$EnumServicesStatusExA(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCSTR pszGroupName);
QueryServiceStatusEx	ADVAPI32$QueryServiceStatusEx	WINADVAPI WINBOOL WINAPI ADVAPI32$QueryServiceStatusEx(SC_HANDLE hService,SC_STATUS_TYPE InfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
QueryServiceConfig2A	ADVAPI32$QueryServiceConfig2A	WINADVAPI WINBOOL WINAPI ADVAPI32$QueryServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
ChangeServiceConfig2A	ADVAPI32$ChangeServiceConfig2A	WINADVAPI WINBOOL WINAPI ADVAPI32$ChangeServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
ChangeServiceConfigA	ADVAPI32$ChangeServiceConfigA	WINADVAPI WINBOOL WINAPI ADVAPI32$ChangeServiceConfigA(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword,LPCSTR lpDisplayName);
CreateServiceA	ADVAPI32$CreateServiceA	WINADVAPI SC_HANDLE WINAPI ADVAPI32$CreateServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword);
DeleteService	ADVAPI32$DeleteService	WINADVAPI WINBOOL WINAPI ADVAPI32$DeleteService(SC_HANDLE hService);
RegOpenKeyExW	ADVAPI32$RegOpenKeyExW	WINADVAPI LONG WINAPI ADVAPI32$RegOpenKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
EnumServicesStatusExW	ADVAPI32$EnumServicesStatusExW	WINADVAPI WINBOOL WINAPI ADVAPI32$EnumServicesStatusExW(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCWSTR pszGroupName);
RegCreateKeyA	ADVAPI32$RegCreateKeyA	WINADVAPI LONG WINAPI ADVAPI32$RegCreateKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
RegSetValueExA	ADVAPI32$RegSetValueExA	WINADVAPI LONG WINAPI ADVAPI32$RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,CONST BYTE *lpData,DWORD cbData);
RegOpenKeyExA	ADVAPI32$RegOpenKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegOpenKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
RegConnectRegistryA	ADVAPI32$RegConnectRegistryA	WINADVAPI LONG WINAPI ADVAPI32$RegConnectRegistryA(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult);
RegCloseKey	ADVAPI32$RegCloseKey	WINADVAPI LONG WINAPI ADVAPI32$RegCloseKey(HKEY hKey);
RegOpenKeyA	ADVAPI32$RegOpenKeyA	WINADVAPI LONG WINAPI ADVAPI32$RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
RegCreateKeyExA	ADVAPI32$RegCreateKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegCreateKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
RegDeleteKeyExA	ADVAPI32$RegDeleteKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteKeyExA(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
RegDeleteKeyValueA	ADVAPI32$RegDeleteKeyValueA	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteKeyValueA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpValueName);
RegQueryValueExA	ADVAPI32$RegQueryValueExA	WINADVAPI LONG WINAPI ADVAPI32$RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
RegQueryInfoKeyA	ADVAPI32$RegQueryInfoKeyA	WINADVAPI LONG WINAPI ADVAPI32$RegQueryInfoKeyA(HKEY hKey,LPSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
RegEnumValueA	ADVAPI32$RegEnumValueA	WINADVAPI LONG WINAPI ADVAPI32$RegEnumValueA(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
RegEnumKeyExA	ADVAPI32$RegEnumKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegEnumKeyExA(HKEY hKey,DWORD dwIndex,LPSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
RegDeleteValueA	ADVAPI32$RegDeleteValueA	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteValueA(HKEY hKey,LPCSTR lpValueName);
RegQueryValueExW	ADVAPI32$RegQueryValueExW	WINADVAPI LONG WINAPI ADVAPI32$RegQueryValueExW(HKEY hKey,LPCWSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
RegSaveKeyExA	ADVAPI32$RegSaveKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegSaveKeyExA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
GetFileSecurityW	ADVAPI32$GetFileSecurityW	WINADVAPI WINBOOL WINAPI ADVAPI32$GetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
GetSecurityDescriptorOwner	ADVAPI32$GetSecurityDescriptorOwner	WINADVAPI WINBOOL WINAPI ADVAPI32$GetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted);
GetSecurityDescriptorDacl	ADVAPI32$GetSecurityDescriptorDacl	WINADVAPI WINBOOL WINAPI ADVAPI32$GetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted);
GetAclInformation	ADVAPI32$GetAclInformation	WINADVAPI WINBOOL WINAPI ADVAPI32$GetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
GetAce	ADVAPI32$GetAce	WINADVAPI WINBOOL WINAPI ADVAPI32$GetAce (PACL pAcl, DWORD dwAceIndex, LPVOID *pAce);
LookupAccountSidW	ADVAPI32$LookupAccountSidW	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupAccountSidW (LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
ConvertSidToStringSidW	ADVAPI32$ConvertSidToStringSidW	WINADVAPI WINBOOL WINAPI ADVAPI32$ConvertSidToStringSidW(PSID Sid,LPWSTR *StringSid);
MapGenericMask	ADVAPI32$MapGenericMask	WINADVAPI VOID WINAPI ADVAPI32$MapGenericMask (PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
OpenProcessToken	ADVAPI32$OpenProcessToken	WINADVAPI WINBOOL WINAPI ADVAPI32$OpenProcessToken (HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
GetTokenInformation	ADVAPI32$GetTokenInformation	WINADVAPI WINBOOL WINAPI ADVAPI32$GetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
InitializeSecurityDescriptor	ADVAPI32$InitializeSecurityDescriptor	WINADVAPI WINBOOL WINAPI ADVAPI32$InitializeSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
SetSecurityDescriptorDacl	ADVAPI32$SetSecurityDescriptorDacl	WINADVAPI WINBOOL WINAPI ADVAPI32$SetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bDaclPresent, PACL pDacl, WINBOOL bDaclDefaulted);
ConvertSecurityDescriptorToStringSecurityDescriptorW	ADVAPI32$ConvertSecurityDescriptorToStringSecurityDescriptorW	WINADVAPI WINBOOL WINAPI ADVAPI32$ConvertSecurityDescriptorToStringSecurityDescriptorW(PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD RequestedStringSDRevision,SECURITY_INFORMATION SecurityInformation,LPWSTR *StringSecurityDescriptor,PULONG StringSecurityDescriptorLen);
StartServiceA	ADVAPI32$StartServiceA	WINADVAPI WINBOOL WINAPI ADVAPI32$StartServiceA(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCSTR *lpServiceArgVectors);
ControlService	ADVAPI32$ControlService	WINADVAPI WINBOOL WINAPI ADVAPI32$ControlService(SC_HANDLE hService,DWORD dwControl,LPSERVICE_STATUS lpServiceStatus);
EnumDependentServicesA	ADVAPI32$EnumDependentServicesA	WINADVAPI WINBOOL WINAPI ADVAPI32$EnumDependentServicesA(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
RegQueryInfoKeyA	ADVAPI32$RegQueryInfoKeyA	WINADVAPI LSTATUS WINAPI ADVAPI32$RegQueryInfoKeyA(HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
NtCreateFile	NTDLL$NtCreateFile	WINBASEAPI NTSTATUS NTAPI NTDLL$NtCreateFile(PHANDLE FileHandle,ACCESS_MASK DesiredAccess,POBJECT_ATTRIBUTES ObjectAttributes,PIO_STATUS_BLOCK IoStatusBlock,PLARGE_INTEGER AllocationSize,ULONG FileAttributes,ULONG ShareAccess,ULONG CreateDisposition,ULONG CreateOptions,PVOID EaBuffer,ULONG EaLength);
NtClose	NTDLL$NtClose	WINBASEAPI NTSTATUS NTAPI NTDLL$NtClose(HANDLE Handle);
NtFsControlFile	NTDLL$NtFsControlFile	WINBASEAPI NTSTATUS NTAPI NTDLL$NtFsControlFile(HANDLE FileHandle,HANDLE Event,PIO_APC_ROUTINE ApcRoutine,PVOID ApcContext,PIO_STATUS_BLOCK IoStatusBlock,ULONG IoControlCode,PVOID InputBuffer,ULONG InputBufferLength,PVOID OutputBuffer,ULONG OutputBufferLength);
ImageEnumerateCertificates	IMAGEHLP$ImageEnumerateCertificates	WINBASEAPI WINBOOL IMAGEAPI IMAGEHLP$ImageEnumerateCertificates(HANDLE FileHandle,WORD TypeFilter,PDWORD CertificateCount,PDWORD Indices,DWORD IndexCount);
ImageGetCertificateHeader	IMAGEHLP$ImageGetCertificateHeader	WINBASEAPI WINBOOL IMAGEAPI IMAGEHLP$ImageGetCertificateHeader(HANDLE FileHandle,DWORD CertificateIndex,LPWIN_CERTIFICATE Certificateheader);
ImageGetCertificateData	IMAGEHLP$ImageGetCertificateData	WINBASEAPI WINBOOL IMAGEAPI IMAGEHLP$ImageGetCertificateData(HANDLE FileHandle,DWORD CertificateIndex,LPWIN_CERTIFICATE Certificate,PDWORD RequiredLength);
CryptVerifyMessageSignature	CRYPT32$CryptVerifyMessageSignature	WINIMPM WINBOOL WINAPI CRYPT32$CryptVerifyMessageSignature (PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppSignerCert);
CertGetNameStringW	CRYPT32$CertGetNameStringW	WINIMPM DWORD WINAPI CRYPT32$CertGetNameStringW (PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPWSTR pszNameString, DWORD cchNameString);
CertCreateCertificateContext	CRYPT32$CertCreateCertificateContext	WINIMPM PCCERT_CONTEXT WINAPI CRYPT32$CertCreateCertificateContext (DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded);
CertFreeCertificateContext	CRYPT32$CertFreeCertificateContext	WINIMPM WINBOOL WINAPI CRYPT32$CertFreeCertificateContext (PCCERT_CONTEXT pCertContext);
CertGetCertificateContextProperty	CRYPT32$CertGetCertificateContextProperty	WINIMPM WINBOOL WINAPI CRYPT32$CertGetCertificateContextProperty (PCCERT_CONTEXT pCertContext, DWORD dwPropId, void *pvData, DWORD *pcbData);
CertGetCertificateChain	CRYPT32$CertGetCertificateChain	WINIMPM WINBOOL WINAPI CRYPT32$CertGetCertificateChain (HCERTCHAINENGINE hChainEngine, PCCERT_CONTEXT pCertContext, LPFILETIME pTime, HCERTSTORE hAdditionalStore, PCERT_CHAIN_PARA pChainPara, DWORD dwFlags, LPVOID pvReserved, PCCERT_CHAIN_CONTEXT *ppChainContext);
CertFreeCertificateChain	CRYPT32$CertFreeCertificateChain	WINIMPM VOID WINAPI CRYPT32$CertFreeCertificateChain (PCCERT_CHAIN_CONTEXT pChainContext);
CryptFindOIDInfo	CRYPT32$CryptFindOIDInfo	WINIMPM PCCRYPT_OID_INFO WINAPI CRYPT32$CryptFindOIDInfo (DWORD dwKeyType, void *pvKey, DWORD dwGroupId);
connect	WS2_32$connect	DECLSPEC_IMPORT int __stdcall WS2_32$connect(SOCKET sock, const struct sockaddr* name, int namelen);
closesocket	WS2_32$closesocket	DECLSPEC_IMPORT int __stdcall WS2_32$closesocket(SOCKET sock);
freeaddrinfo	WS2_32$freeaddrinfo	DECLSPEC_IMPORT void __stdcall WS2_32$freeaddrinfo(struct addrinfo* ai);
getaddrinfo	WS2_32$getaddrinfo	DECLSPEC_IMPORT int __stdcall WS2_32$getaddrinfo(char* host, char* port, const struct addrinfo* hints, struct addrinfo** result);
htonl	WS2_32$htonl	DECLSPEC_IMPORT u_long __stdcall WS2_32$htonl(u_long hostlong);
htons	WS2_32$htons	DECLSPEC_IMPORT u_short __stdcall WS2_32$htons(u_short hostshort);
inet_ntoa	WS2_32$inet_ntoa	DECLSPEC_IMPORT char * __stdcall WS2_32$inet_ntoa(struct in_addr in);
ioctlsocket	WS2_32$ioctlsocket	DECLSPEC_IMPORT int __stdcall WS2_32$ioctlsocket(SOCKET sock, long cmd, u_long* arg);
select	WS2_32$select	DECLSPEC_IMPORT int __stdcall WS2_32$select(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, const struct timeval* timeout);
socket	WS2_32$socket	DECLSPEC_IMPORT unsigned int __stdcall WS2_32$socket(int af, int type, int protocol);
__WSAFDIsSet	WS2_32$__WSAFDIsSet	DECLSPEC_IMPORT int __stdcall WS2_32$__WSAFDIsSet(SOCKET sock, struct fd_set* fdset);
WSAGetLastError	WS2_32$WSAGetLastError	DECLSPEC_IMPORT int __stdcall WS2_32$WSAGetLastError();
InetNtopW	WS2_32$InetNtopW	DECLSPEC_IMPORT LPCWSTR WINAPI WS2_32$InetNtopW(INT Family, LPCVOID pAddr, LPWSTR pStringBuf, size_t StringBufSIze);
inet_pton	WS2_32$inet_pton	DECLSPEC_IMPORT INT WINAPI WS2_32$inet_pton(INT Family, LPCSTR pStringBuf, PVOID pAddr);
DnsFree	DNSAPI$DnsFree	DECLSPEC_IMPORT VOID WINAPI DNSAPI$DnsFree(PVOID pData,DNS_FREE_TYPE FreeType);
DnsGetCacheDataTable	DNSAPI$DnsGetCacheDataTable	DECLSPEC_IMPORT int WINAPI DNSAPI$DnsGetCacheDataTable(PVOID data);
CoInitializeEx	OLE32$CoInitializeEx	DECLSPEC_IMPORT HRESULT WINAPI OLE32$CoInitializeEx (LPVOID pvReserved, DWORD dwCoInit);
CoUninitialize	OLE32$CoUninitialize	DECLSPEC_IMPORT HRESULT WINAPI OLE32$CoUninitialize (void);
CoInitializeSecurity	OLE32$CoInitializeSecurity	DECLSPEC_IMPORT HRESULT WINAPI OLE32$CoInitializeSecurity (PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3);
CoCreateInstance	OLE32$CoCreateInstance	DECLSPEC_IMPORT HRESULT WINAPI OLE32$CoCreateInstance (REFCLSID rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, REFIID riid, LPVOID *ppv);
CLSIDFromString	OLE32$CLSIDFromString	DECLSPEC_IMPORT HRESULT WINAPI OLE32$CLSIDFromString (LPCOLESTR lpsz, LPCLSID pclsid);
IIDFromString	OLE32$IIDFromString	DECLSPEC_IMPORT HRESULT WINAPI OLE32$IIDFromString (LPCOLESTR lpsz, LPIID lpiid);
StringFromGUID2	OLE32$StringFromGUID2	DECLSPEC_IMPORT int     WINAPI OLE32$StringFromGUID2 (REFGUID rguid, LPOLESTR lpsz, int cchMax);
CoSetProxyBlanket	OLE32$CoSetProxyBlanket	DECLSPEC_IMPORT HRESULT WINAPI OLE32$CoSetProxyBlanket(IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
CoTaskMemAlloc	OLE32$CoTaskMemAlloc	DECLSPEC_IMPORT LPVOID WINAPI OLE32$CoTaskMemAlloc(SIZE_T cb);
CoTaskMemFree	OLE32$CoTaskMemFree	DECLSPEC_IMPORT void WINAPI OLE32$CoTaskMemFree(LPVOID pv);
SysAllocString	OLEAUT32$SysAllocString	DECLSPEC_IMPORT BSTR WINAPI OLEAUT32$SysAllocString(const OLECHAR *);
SysReAllocString	OLEAUT32$SysReAllocString	DECLSPEC_IMPORT INT  WINAPI OLEAUT32$SysReAllocString(BSTR *, const OLECHAR *);
SysFreeString	OLEAUT32$SysFreeString	DECLSPEC_IMPORT void WINAPI OLEAUT32$SysFreeString(BSTR);
SysStringLen	OLEAUT32$SysStringLen	DECLSPEC_IMPORT UINT WINAPI OLEAUT32$SysStringLen(BSTR);
VariantInit	OLEAUT32$VariantInit	DECLSPEC_IMPORT void WINAPI OLEAUT32$VariantInit(VARIANTARG *pvarg);
VariantClear	OLEAUT32$VariantClear	DECLSPEC_IMPORT void WINAPI OLEAUT32$VariantClear(VARIANTARG *pvarg);
SysAddRefString	OLEAUT32$SysAddRefString	DECLSPEC_IMPORT HRESULT WINAPI OLEAUT32$SysAddRefString(BSTR);
VariantChangeType	OLEAUT32$VariantChangeType	DECLSPEC_IMPORT HRESULT WINAPI OLEAUT32$VariantChangeType(VARIANTARG *pvargDest, VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt);
VarFormatDateTime	OLEAUT32$VarFormatDateTime	DECLSPEC_IMPORT void WINAPI OLEAUT32$VarFormatDateTime(LPVARIANT pvarIn,int iNamedFormat,ULONG dwFlags,BSTR *pbstrOut);
SafeArrayDestroy	OLEAUT32$SafeArrayDestroy	DECLSPEC_IMPORT void WINAPI OLEAUT32$SafeArrayDestroy(SAFEARRAY *psa);
SafeArrayLock	OLEAUT32$SafeArrayLock	DECLSPEC_IMPORT HRESULT WINAPI OLEAUT32$SafeArrayLock(SAFEARRAY *psa);
SafeArrayGetLBound	OLEAUT32$SafeArrayGetLBound	DECLSPEC_IMPORT HRESULT WINAPI OLEAUT32$SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound);
SafeArrayGetUBound	OLEAUT32$SafeArrayGetUBound	DECLSPEC_IMPORT HRESULT WINAPI OLEAUT32$SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound);
SafeArrayGetElement	OLEAUT32$SafeArrayGetElement	DECLSPEC_IMPORT HRESULT WINAPI OLEAUT32$SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv);
SafeArrayGetElemsize	OLEAUT32$SafeArrayGetElemsize	DECLSPEC_IMPORT UINT WINAPI OLEAUT32$SafeArrayGetElemsize(SAFEARRAY *psa);
SafeArrayAccessData	OLEAUT32$SafeArrayAccessData	DECLSPEC_IMPORT HRESULT WINAPI OLEAUT32$SafeArrayAccessData(SAFEARRAY *psa,void HUGEP **ppvData);
SafeArrayUnaccessData	OLEAUT32$SafeArrayUnaccessData	DECLSPEC_IMPORT HRESULT WINAPI OLEAUT32$SafeArrayUnaccessData(SAFEARRAY *psa);
CAEnumFirstCA	CERTCLI$CAEnumFirstCA	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAEnumFirstCA(IN LPCWSTR wszScope, IN DWORD dwFlags, OUT LPVOID * phCAInfo);
CAEnumNextCA	CERTCLI$CAEnumNextCA	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAEnumNextCA(IN LPVOID hPrevCA, OUT LPVOID * phCAInfo);
CACloseCA	CERTCLI$CACloseCA	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CACloseCA(IN LPVOID hCA);
CACountCAs	CERTCLI$CACountCAs	DECLSPEC_IMPORT DWORD WINAPI CERTCLI$CACountCAs(IN LPVOID hCAInfo);
CAGetDN	CERTCLI$CAGetDN	DECLSPEC_IMPORT LPCWSTR WINAPI CERTCLI$CAGetDN(IN LPVOID hCAInfo);
CAGetCAProperty	CERTCLI$CAGetCAProperty	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCAProperty(IN LPVOID hCAInfo, IN LPCWSTR wszPropertyName, OUT PZPWSTR *pawszPropertyValue);
CAFreeCAProperty	CERTCLI$CAFreeCAProperty	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAFreeCAProperty(IN LPVOID hCAInfo, IN PZPWSTR awszPropertyValue);
CAGetCAFlags	CERTCLI$CAGetCAFlags	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCAFlags(IN LPVOID hCAInfo, OUT DWORD  *pdwFlags);
CAGetCACertificate	CERTCLI$CAGetCACertificate	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCACertificate(IN LPVOID hCAInfo, OUT PCCERT_CONTEXT *ppCert);
CAGetCAExpiration	CERTCLI$CAGetCAExpiration	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCAExpiration(IN LPVOID hCAInfo, OUT DWORD * pdwExpiration, OUT DWORD * pdwUnits);
CAGetCASecurity	CERTCLI$CAGetCASecurity	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCASecurity(IN LPVOID hCAInfo, OUT PSECURITY_DESCRIPTOR * ppSD);
CAGetAccessRights	CERTCLI$CAGetAccessRights	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetAccessRights(IN LPVOID hCAInfo, IN DWORD dwContext, OUT DWORD *pdwAccessRights);
CAEnumCertTypesForCA	CERTCLI$CAEnumCertTypesForCA	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAEnumCertTypesForCA(IN LPVOID hCAInfo, IN DWORD dwFlags, OUT LPVOID * phCertType);
CAEnumCertTypes	CERTCLI$CAEnumCertTypes	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAEnumCertTypes(IN DWORD dwFlags, OUT LPVOID * phCertType);
CAEnumNextCertType	CERTCLI$CAEnumNextCertType	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAEnumNextCertType(IN LPVOID hPrevCertType, OUT LPVOID * phCertType);
CACountCertTypes	CERTCLI$CACountCertTypes	DECLSPEC_IMPORT DWORD WINAPI CERTCLI$CACountCertTypes(IN LPVOID hCertType);
CACloseCertType	CERTCLI$CACloseCertType	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CACloseCertType(IN LPVOID hCertType);
CAGetCertTypeProperty	CERTCLI$CAGetCertTypeProperty	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCertTypeProperty(IN LPVOID hCertType, IN LPCWSTR wszPropertyName, OUT PZPWSTR *pawszPropertyValue);
CAGetCertTypePropertyEx	CERTCLI$CAGetCertTypePropertyEx	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCertTypePropertyEx(IN LPVOID hCertType, IN LPCWSTR wszPropertyName, OUT LPVOID *pPropertyValue);
CAFreeCertTypeProperty	CERTCLI$CAFreeCertTypeProperty	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAFreeCertTypeProperty(IN LPVOID hCertType, IN PZPWSTR awszPropertyValue);
CAGetCertTypeExtensionsEx	CERTCLI$CAGetCertTypeExtensionsEx	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCertTypeExtensionsEx(IN LPVOID hCertType, IN DWORD dwFlags, IN LPVOID pParam, OUT PCERT_EXTENSIONS * ppCertExtensions);
CAFreeCertTypeExtensions	CERTCLI$CAFreeCertTypeExtensions	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAFreeCertTypeExtensions(IN LPVOID hCertType, IN PCERT_EXTENSIONS pCertExtensions);
CAGetCertTypeFlagsEx	CERTCLI$CAGetCertTypeFlagsEx	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCertTypeFlagsEx(IN LPVOID hCertType, IN DWORD dwOption, OUT DWORD * pdwFlags);
CAGetCertTypeExpiration	CERTCLI$CAGetCertTypeExpiration	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCertTypeExpiration(IN LPVOID hCertType, OUT OPTIONAL FILETIME * pftExpiration, OUT OPTIONAL FILETIME * pftOverlap);
CACertTypeGetSecurity	CERTCLI$CACertTypeGetSecurity	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CACertTypeGetSecurity(IN LPVOID hCertType, OUT PSECURITY_DESCRIPTOR * ppSD);
CAGetCertTypeAccessRights	CERTCLI$CAGetCertTypeAccessRights	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$CAGetCertTypeAccessRights(IN LPVOID hCertType, IN DWORD dwContext, OUT DWORD *pdwAccessRights);
caTranslateFileTimePeriodToPeriodUnits	CERTCLI$caTranslateFileTimePeriodToPeriodUnits	DECLSPEC_IMPORT HRESULT WINAPI CERTCLI$caTranslateFileTimePeriodToPeriodUnits(IN FILETIME const *pftGMT, IN BOOL Flags, OUT DWORD *pcPeriodUnits, OUT LPVOID*prgPeriodUnits);
MiniDumpWriteDump	DBGHELP$MiniDumpWriteDump	DECLSPEC_IMPORT WINBOOL WINAPI DBGHELP$MiniDumpWriteDump(HANDLE hProcess,DWORD ProcessId,HANDLE hFile,MINIDUMP_TYPE DumpType,CONST PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam,CONST PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,CONST PMINIDUMP_CALLBACK_INFORMATION CallbackParam);
ldap_init	WLDAP32$ldap_init	WINLDAPAPI LDAP* LDAPAPI WLDAP32$ldap_init(PSTR, ULONG);
ldap_bind_s	WLDAP32$ldap_bind_s	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_bind_s(LDAP *ld,const PSTR  dn,const PCHAR cred,ULONG method);
ldap_search_s	WLDAP32$ldap_search_s	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_search_s(LDAP *ld,PSTR base,ULONG scope,PSTR filter,PZPSTR attrs,ULONG attrsonly,PLDAPMessage *res);
ldap_count_entries	WLDAP32$ldap_count_entries	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_count_entries(LDAP*,LDAPMessage*);
ldap_get_values_lenA	WLDAP32$ldap_get_values_lenA	WINLDAPAPI struct berval **LDAPAPI WLDAP32$ldap_get_values_lenA (LDAP *ExternalHandle,LDAPMessage *Message,const PCHAR attr);
ldap_value_free_len	WLDAP32$ldap_value_free_len	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_value_free_len(struct berval **vals);
ldap_set_optionA	WLDAP32$ldap_set_optionA	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_set_optionA(LDAP *ld,int option,const void *invalue);
ldap_search_init_pageA	WLDAP32$ldap_search_init_pageA	WINLDAPAPI PLDAPSearch LDAPAPI WLDAP32$ldap_search_init_pageA(PLDAP ExternalHandle,const PCHAR DistinguishedName,ULONG ScopeOfSearch,const PCHAR SearchFilter,PCHAR AttributeList[],ULONG AttributesOnly,PLDAPControlA *ServerControls,PLDAPControlA *ClientControls,ULONG PageTimeLimit,ULONG TotalSizeLimit,PLDAPSortKeyA *SortKeys);
ldap_get_paged_count	WLDAP32$ldap_get_paged_count	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_get_paged_count(PLDAP ExternalHandle,PLDAPSearch SearchBlock,ULONG *TotalCount,PLDAPMessage Results);
ldap_get_next_page_s	WLDAP32$ldap_get_next_page_s	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_get_next_page_s(PLDAP ExternalHandle,PLDAPSearch SearchHandle,struct l_timeval *timeout,ULONG PageSize,ULONG *TotalCount,LDAPMessage **Results);
ldap_first_entry	WLDAP32$ldap_first_entry	WINLDAPAPI LDAPMessage*  LDAPAPI WLDAP32$ldap_first_entry(LDAP *ld,LDAPMessage *res);
ldap_next_entry	WLDAP32$ldap_next_entry	WINLDAPAPI LDAPMessage*  LDAPAPI WLDAP32$ldap_next_entry(LDAP*,LDAPMessage*);
ldap_first_attribute	WLDAP32$ldap_first_attribute	WINLDAPAPI PCHAR LDAPAPI WLDAP32$ldap_first_attribute(LDAP *ld,LDAPMessage *entry,BerElement **ptr);
ldap_count_values	WLDAP32$ldap_count_values	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_count_values(PCHAR);
ldap_get_values	WLDAP32$ldap_get_values	WINLDAPAPI PCHAR * LDAPAPI WLDAP32$ldap_get_values(LDAP *ld,LDAPMessage *entry,const PSTR attr);
ldap_value_free	WLDAP32$ldap_value_free	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_value_free(PCHAR *);
ldap_next_attribute	WLDAP32$ldap_next_attribute	WINLDAPAPI PCHAR LDAPAPI WLDAP32$ldap_next_attribute(LDAP *ld,LDAPMessage *entry,BerElement *ptr);
ber_free	WLDAP32$ber_free	WINLDAPAPI VOID LDAPAPI WLDAP32$ber_free(BerElement *pBerElement,INT fbuf);
ldap_memfree	WLDAP32$ldap_memfree	WINLDAPAPI VOID LDAPAPI WLDAP32$ldap_memfree(PCHAR);
ldap_unbind	WLDAP32$ldap_unbind	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_unbind(LDAP*);
ldap_unbind_s	WLDAP32$ldap_unbind_s	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_unbind_s(LDAP*);
ldap_msgfree	WLDAP32$ldap_msgfree	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_msgfree(LDAPMessage*);
UuidToStringA	RPCRT4$UuidToStringA	RPCRTAPI RPC_STATUS RPC_ENTRY RPCRT4$UuidToStringA(UUID *Uuid,RPC_CSTR *StringUuid);
RpcStringFreeA	RPCRT4$RpcStringFreeA	RPCRTAPI RPC_STATUS RPC_ENTRY RPCRT4$RpcStringFreeA(RPC_CSTR *String);
EnumProcessModulesEx	PSAPI$EnumProcessModulesEx	DECLSPEC_IMPORT WINBOOL WINAPI PSAPI$EnumProcessModulesEx(HANDLE hProcess, HMODULE *lphModule, DWORD cb, LPDWORD lpcbNeeded, DWORD dwFilterFlag);
GetModuleFileNameExA	PSAPI$GetModuleFileNameExA	DECLSPEC_IMPORT DWORD WINAPI PSAPI$GetModuleFileNameExA(HANDLE hProcess, HMODULE hModule, LPSTR lpFilename, DWORD nSize);
GetFileVersionInfoSizeA	VERSION$GetFileVersionInfoSizeA	DECLSPEC_IMPORT DWORD WINAPI VERSION$GetFileVersionInfoSizeA(LPCSTR lptstrFilenamea ,LPDWORD lpdwHandle);
GetFileVersionInfoA	VERSION$GetFileVersionInfoA	DECLSPEC_IMPORT WINBOOL WINAPI VERSION$GetFileVersionInfoA(LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
VerQueryValueA	VERSION$VerQueryValueA	DECLSPEC_IMPORT WINBOOL WINAPI VERSION$VerQueryValueA(LPCVOID pBlock, LPCSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen);
VirtualAlloc	KERNEL32$VirtualAlloc	WINBASEAPI void * WINAPI KERNEL32$VirtualAlloc (LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
VirtualAllocEx	KERNEL32$VirtualAllocEx	WINBASEAPI LPVOID WINAPI KERNEL32$VirtualAllocEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
VirtualProtectEx	KERNEL32$VirtualProtectEx	WINBASEAPI WINBOOL WINAPI KERNEL32$VirtualProtectEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
VirtualQueryEx	KERNEL32$VirtualQueryEx	WINBASEAPI SIZE_T WINAPI KERNEL32$VirtualQueryEx (HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
VirtualFree	KERNEL32$VirtualFree	WINBASEAPI int WINAPI KERNEL32$VirtualFree (LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
VirtualFreeEx	KERNEL32$VirtualFreeEx	WINBASEAPI int WINAPI KERNEL32$VirtualFreeEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
LocalAlloc	KERNEL32$LocalAlloc	WINBASEAPI HLOCAL WINAPI KERNEL32$LocalAlloc (UINT, SIZE_T);
LocalFree	KERNEL32$LocalFree	WINBASEAPI HLOCAL WINAPI KERNEL32$LocalFree (HLOCAL);
GlobalAlloc	KERNEL32$GlobalAlloc	WINBASEAPI HGLOBAL KERNEL32$GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
GlobalFree	KERNEL32$GlobalFree	WINBASEAPI HGLOBAL KERNEL32$GlobalFree(HGLOBAL hMem);
HeapAlloc	KERNEL32$HeapAlloc	WINBASEAPI void * WINAPI KERNEL32$HeapAlloc (HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
HeapReAlloc	KERNEL32$HeapReAlloc	WINBASEAPI LPVOID WINAPI KERNEL32$HeapReAlloc (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
GetProcessHeap	KERNEL32$GetProcessHeap	WINBASEAPI HANDLE WINAPI KERNEL32$GetProcessHeap();
HeapFree	KERNEL32$HeapFree	WINBASEAPI BOOL WINAPI KERNEL32$HeapFree (HANDLE, DWORD, PVOID);
FormatMessageA	KERNEL32$FormatMessageA	WINBASEAPI DWORD WINAPI KERNEL32$FormatMessageA (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
WideCharToMultiByte	KERNEL32$WideCharToMultiByte	WINBASEAPI int WINAPI KERNEL32$WideCharToMultiByte (UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
MultiByteToWideChar	KERNEL32$MultiByteToWideChar	WINBASEAPI int WINAPI KERNEL32$MultiByteToWideChar (UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
FileTimeToLocalFileTime	KERNEL32$FileTimeToLocalFileTime	WINBASEAPI int WINAPI KERNEL32$FileTimeToLocalFileTime (CONST FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
FileTimeToSystemTime	KERNEL32$FileTimeToSystemTime	WINBASEAPI int WINAPI KERNEL32$FileTimeToSystemTime (CONST FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
GetDateFormatW	KERNEL32$GetDateFormatW	WINBASEAPI int WINAPI KERNEL32$GetDateFormatW (LCID Locale, DWORD dwFlags, CONST SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
GetSystemTimeAsFileTime	KERNEL32$GetSystemTimeAsFileTime	WINBASEAPI VOID WINAPI KERNEL32$GetSystemTimeAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
GetSystemInfo	KERNEL32$GetSystemInfo	WINBASEAPI VOID WINAPI KERNEL32$GetSystemInfo (LPSYSTEM_INFO lpSystemInfo);
GetLastError	KERNEL32$GetLastError	WINBASEAPI DWORD WINAPI KERNEL32$GetLastError (VOID);
SetLastError	KERNEL32$SetLastError	WINBASEAPI VOID WINAPI KERNEL32$SetLastError (DWORD dwErrCode);
CloseHandle	KERNEL32$CloseHandle	WINBASEAPI WINBOOL WINAPI KERNEL32$CloseHandle (HANDLE hObject);
GetTickCount	KERNEL32$GetTickCount	WINBASEAPI DWORD WINAPI KERNEL32$GetTickCount (VOID);
CreateFiber	KERNEL32$CreateFiber	WINBASEAPI LPVOID WINAPI KERNEL32$CreateFiber (SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
ConvertThreadToFiber	KERNEL32$ConvertThreadToFiber	WINBASEAPI LPVOID WINAPI KERNEL32$ConvertThreadToFiber (LPVOID lpParameter);
ConvertFiberToThread	KERNEL32$ConvertFiberToThread	WINBASEAPI WINBOOL WINAPI KERNEL32$ConvertFiberToThread (VOID);
DeleteFiber	KERNEL32$DeleteFiber	WINBASEAPI VOID WINAPI KERNEL32$DeleteFiber (LPVOID lpFiber);
SwitchToFiber	KERNEL32$SwitchToFiber	WINBASEAPI VOID WINAPI KERNEL32$SwitchToFiber (LPVOID lpFiber);
WaitForSingleObject	KERNEL32$WaitForSingleObject	WINBASEAPI DWORD WINAPI KERNEL32$WaitForSingleObject (HANDLE hHandle, DWORD dwMilliseconds);
Sleep	KERNEL32$Sleep	WINBASEAPI VOID WINAPI KERNEL32$Sleep (DWORD dwMilliseconds);
CreateProcessW	KERNEL32$CreateProcessW	WINBASEAPI WINBOOL WINAPI KERNEL32$CreateProcessW (LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
CreateProcessA	KERNEL32$CreateProcessA	WINBASEAPI WINBOOL WINAPI KERNEL32$CreateProcessA (LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
OpenProcess	KERNEL32$OpenProcess	WINBASEAPI HANDLE WINAPI KERNEL32$OpenProcess (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwProcessId);
GetCurrentProcess	KERNEL32$GetCurrentProcess	WINBASEAPI HANDLE WINAPI KERNEL32$GetCurrentProcess (VOID);
GetCurrentThread	KERNEL32$GetCurrentThread	WINBASEAPI HANDLE WINAPI KERNEL32$GetCurrentThread (VOID);
GetExitCodeProcess	KERNEL32$GetExitCodeProcess	WINBASEAPI WINBOOL WINAPI KERNEL32$GetExitCodeProcess (HANDLE hProcess, LPDWORD lpExitCode);
WriteProcessMemory	KERNEL32$WriteProcessMemory	WINBASEAPI WINBOOL WINAPI KERNEL32$WriteProcessMemory (HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten);
ReadProcessMemory	KERNEL32$ReadProcessMemory	WINBASEAPI WINBOOL WINAPI KERNEL32$ReadProcessMemory (HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
GetCurrentProcessId	KERNEL32$GetCurrentProcessId	WINBASEAPI DWORD WINAPI KERNEL32$GetCurrentProcessId (VOID);
GetProcessIdOfThread	KERNEL32$GetProcessIdOfThread	WINBASEAPI DWORD WINAPI KERNEL32$GetProcessIdOfThread (HANDLE Thread);
ProcessIdToSessionId	KERNEL32$ProcessIdToSessionId	WINBASEAPI WINBOOL WINAPI KERNEL32$ProcessIdToSessionId (DWORD dwProcessId, DWORD *pSessionId);
InitializeProcThreadAttributeList	KERNEL32$InitializeProcThreadAttributeList	WINBASEAPI WINBOOL WINAPI KERNEL32$InitializeProcThreadAttributeList (LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwAttributeCount, DWORD dwFlags, PSIZE_T lpSize);
UpdateProcThreadAttribute	KERNEL32$UpdateProcThreadAttribute	WINBASEAPI WINBOOL WINAPI KERNEL32$UpdateProcThreadAttribute (LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwFlags, DWORD_PTR Attribute, PVOID lpValue, SIZE_T cbSize, PVOID lpPreviousValue, PSIZE_T lpReturnSize);
DeleteProcThreadAttributeList	KERNEL32$DeleteProcThreadAttributeList	WINBASEAPI VOID WINAPI KERNEL32$DeleteProcThreadAttributeList (LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList);
CreateThread	KERNEL32$CreateThread	WINBASEAPI HANDLE WINAPI KERNEL32$CreateThread (LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
CreateRemoteThread	KERNEL32$CreateRemoteThread	WINBASEAPI HANDLE WINAPI KERNEL32$CreateRemoteThread (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
OpenThread	KERNEL32$OpenThread	WINBASEAPI HANDLE WINAPI KERNEL32$OpenThread (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwThreadId);
GetThreadContext	KERNEL32$GetThreadContext	WINBASEAPI WINBOOL WINAPI KERNEL32$GetThreadContext (HANDLE hThread, LPCONTEXT lpContext);
SetThreadContext	KERNEL32$SetThreadContext	WINBASEAPI WINBOOL WINAPI KERNEL32$SetThreadContext (HANDLE hThread, CONST LPCONTEXT lpContext);
SuspendThread	KERNEL32$SuspendThread	WINBASEAPI DWORD WINAPI KERNEL32$SuspendThread (HANDLE hThread);
ResumeThread	KERNEL32$ResumeThread	WINBASEAPI DWORD WINAPI KERNEL32$ResumeThread (HANDLE hThread);
GetComputerNameExW	KERNEL32$GetComputerNameExW	WINBASEAPI WINBOOL WINAPI KERNEL32$GetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
GetComputerNameA	KERNEL32$GetComputerNameA	WINBASEAPI WINBOOL WINAPI KERNEL32$GetComputerNameA (LPSTR lpBuffer, LPDWORD nSize);
lstrcmpA	KERNEL32$lstrcmpA	WINBASEAPI int WINAPI KERNEL32$lstrcmpA (LPCSTR lpString1, LPCSTR lpString2);
lstrcmpW	KERNEL32$lstrcmpW	WINBASEAPI int WINAPI KERNEL32$lstrcmpW (LPCWSTR lpString1, LPCWSTR lpString2);
lstrcmpiW	KERNEL32$lstrcmpiW	WINBASEAPI int WINAPI KERNEL32$lstrcmpiW (LPCWSTR lpString1, LPCWSTR lpString2);
lstrlenA	KERNEL32$lstrlenA	WINBASEAPI int WINAPI KERNEL32$lstrlenA (LPCSTR lpString);
lstrlenW	KERNEL32$lstrlenW	WINBASEAPI int WINAPI KERNEL32$lstrlenW (LPCWSTR lpString);
lstrcatW	KERNEL32$lstrcatW	WINBASEAPI LPWSTR WINAPI KERNEL32$lstrcatW (LPWSTR lpString1, LPCWSTR lpString2);
lstrcpynW	KERNEL32$lstrcpynW	WINBASEAPI LPWSTR WINAPI KERNEL32$lstrcpynW (LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
GetFullPathNameW	KERNEL32$GetFullPathNameW	WINBASEAPI DWORD WINAPI KERNEL32$GetFullPathNameW (LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
GetFileAttributesW	KERNEL32$GetFileAttributesW	WINBASEAPI DWORD WINAPI KERNEL32$GetFileAttributesW (LPCWSTR lpFileName);
GetCurrentDirectoryW	KERNEL32$GetCurrentDirectoryW	WINBASEAPI DWORD WINAPI KERNEL32$GetCurrentDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);
FindFirstFileW	KERNEL32$FindFirstFileW	WINBASEAPI HANDLE WINAPI KERNEL32$FindFirstFileW (LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
FindNextFileW	KERNEL32$FindNextFileW	WINBASEAPI WINBOOL WINAPI KERNEL32$FindNextFileW (HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
FindClose	KERNEL32$FindClose	WINBASEAPI WINBOOL WINAPI KERNEL32$FindClose (HANDLE hFindFile);
ExpandEnvironmentStringsW	KERNEL32$ExpandEnvironmentStringsW	WINBASEAPI DWORD WINAPI KERNEL32$ExpandEnvironmentStringsW (LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
ExpandEnvironmentStringsA	KERNEL32$ExpandEnvironmentStringsA	WINBASEAPI DWORD WINAPI KERNEL32$ExpandEnvironmentStringsA (LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
GetTempPathW	KERNEL32$GetTempPathW	WINBASEAPI DWORD WINAPI KERNEL32$GetTempPathW (DWORD nBufferLength, LPWSTR lpBuffer);
GetTempFileNameW	KERNEL32$GetTempFileNameW	WINBASEAPI DWORD WINAPI KERNEL32$GetTempFileNameW (LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
CreateFileW	KERNEL32$CreateFileW	WINBASEAPI HANDLE WINAPI KERNEL32$CreateFileW (LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
CreateFileA	KERNEL32$CreateFileA	WINBASEAPI HANDLE WINAPI KERNEL32$CreateFileA (LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
GetFileSize	KERNEL32$GetFileSize	WINBASEAPI DWORD WINAPI KERNEL32$GetFileSize (HANDLE hFile, LPDWORD lpFileSizeHigh);
ReadFile	KERNEL32$ReadFile	WINBASEAPI WINBOOL WINAPI KERNEL32$ReadFile (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
WriteFile	KERNEL32$WriteFile	WINBASEAPI WINBOOL WINAPI KERNEL32$WriteFile (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
DeleteFileW	KERNEL32$DeleteFileW	WINBASEAPI WINBOOL WINAPI KERNEL32$DeleteFileW (LPCWSTR lpFileName);
CreateFileMappingA	KERNEL32$CreateFileMappingA	WINBASEAPI HANDLE WINAPI KERNEL32$CreateFileMappingA (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);
MapViewOfFile	KERNEL32$MapViewOfFile	WINBASEAPI LPVOID WINAPI KERNEL32$MapViewOfFile (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
UnmapViewOfFile	KERNEL32$UnmapViewOfFile	WINBASEAPI WINBOOL WINAPI KERNEL32$UnmapViewOfFile (LPCVOID lpBaseAddress);
GetEnvironmentStrings	KERNEL32$GetEnvironmentStrings	WINBASEAPI LPTCH WINAPI KERNEL32$GetEnvironmentStrings();
FreeEnvironmentStringsA	KERNEL32$FreeEnvironmentStringsA	WINBASEAPI BOOL WINAPI KERNEL32$FreeEnvironmentStringsA(LPSTR);
CreateToolhelp32Snapshot	KERNEL32$CreateToolhelp32Snapshot	WINBASEAPI HANDLE WINAPI KERNEL32$CreateToolhelp32Snapshot(DWORD dwFlags,DWORD th32ProcessID);
Process32First	KERNEL32$Process32First	WINBASEAPI WINBOOL WINAPI KERNEL32$Process32First(HANDLE hSnapshot,LPPROCESSENTRY32 lppe);
Process32Next	KERNEL32$Process32Next	WINBASEAPI WINBOOL WINAPI KERNEL32$Process32Next(HANDLE hSnapshot,LPPROCESSENTRY32 lppe);
LoadLibraryA	KERNEL32$LoadLibraryA	WINBASEAPI HMODULE WINAPI KERNEL32$LoadLibraryA (LPCSTR lpLibFileName);
GetProcAddress	KERNEL32$GetProcAddress	WINBASEAPI FARPROC WINAPI KERNEL32$GetProcAddress (HMODULE hModule, LPCSTR lpProcName);
FreeLibrary	KERNEL32$FreeLibrary	WINBASEAPI WINBOOL WINAPI KERNEL32$FreeLibrary (HMODULE hLibModule);
GetAdaptersInfo	IPHLPAPI$GetAdaptersInfo	WINBASEAPI DWORD WINAPI IPHLPAPI$GetAdaptersInfo(PIP_ADAPTER_INFO,PULONG);
GetIpForwardTable	IPHLPAPI$GetIpForwardTable	WINBASEAPI DWORD WINAPI IPHLPAPI$GetIpForwardTable (PMIB_IPFORWARDTABLE pIpForwardTable, PULONG pdwSize, WINBOOL bOrder);
GetNetworkParams	IPHLPAPI$GetNetworkParams	WINBASEAPI DWORD WINAPI IPHLPAPI$GetNetworkParams(PFIXED_INFO,PULONG);
GetUdpTable	IPHLPAPI$GetUdpTable	WINBASEAPI ULONG WINAPI IPHLPAPI$GetUdpTable (PMIB_UDPTABLE UdpTable, PULONG SizePointer, WINBOOL Order);
GetTcpTable	IPHLPAPI$GetTcpTable	WINBASEAPI ULONG WINAPI IPHLPAPI$GetTcpTable (PMIB_TCPTABLE TcpTable, PULONG SizePointer, WINBOOL Order);
strcat	MSVCRT$strcat	WINBASEAPI char * __cdecl MSVCRT$strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
_snprintf	MSVCRT$_snprintf	WINBASEAPI int __cdecl MSVCRT$_snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...);
sscanf	MSVCRT$sscanf	WINBASEAPI int __cdecl MSVCRT$sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
calloc	MSVCRT$calloc	WINBASEAPI void *__cdecl MSVCRT$calloc(size_t _NumOfElements, size_t _SizeOfElements);
realloc	MSVCRT$realloc	WINBASEAPI void *__cdecl MSVCRT$realloc(void *_Memory, size_t _NewSize);
free	MSVCRT$free	WINBASEAPI void __cdecl MSVCRT$free(void *_Memory);
memcmp	MSVCRT$memcmp	WINBASEAPI int __cdecl MSVCRT$memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
memcpy	MSVCRT$memcpy	WINBASEAPI void *__cdecl MSVCRT$memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount);
memset	MSVCRT$memset	WINBASEAPI void __cdecl MSVCRT$memset(void *dest, int c, size_t count);
sprintf	MSVCRT$sprintf	WINBASEAPI int __cdecl MSVCRT$sprintf(char *__stream, const char *__format, ...);
vsnprintf	MSVCRT$vsnprintf	WINBASEAPI int __cdecl MSVCRT$vsnprintf(char * __restrict__ d,size_t n,const char * __restrict__ format,va_list arg);
_stricmp	MSVCRT$_stricmp	WINBASEAPI int __cdecl MSVCRT$_stricmp(const char *_Str1,const char *_Str2);
strchr	MSVCRT$strchr	WINBASEAPI PCHAR __cdecl MSVCRT$strchr(const char *haystack, int needle);
strcmp	MSVCRT$strcmp	WINBASEAPI int __cdecl MSVCRT$strcmp(const char *_Str1,const char *_Str2);
strcpy	MSVCRT$strcpy	WINBASEAPI char * __cdecl MSVCRT$strcpy(char * __restrict__ __dst, const char * __restrict__ __src);
strlen	MSVCRT$strlen	WINBASEAPI size_t __cdecl MSVCRT$strlen(const char *_Str);
wcsncmp	MSVCRT$wcsncmp	WINBASEAPI int __cdecl MSVCRT$wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2, size_t count);
strncmp	MSVCRT$strncmp	WINBASEAPI int __cdecl MSVCRT$strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
strnlen	MSVCRT$strnlen	WINBASEAPI size_t __cdecl MSVCRT$strnlen(const char *_Str,size_t _MaxCount);
strstr	MSVCRT$strstr	WINBASEAPI PCHAR __cdecl MSVCRT$strstr(const char *haystack, const char *needle);
strtok	MSVCRT$strtok	WINBASEAPI char *__cdecl MSVCRT$strtok(char * __restrict__ _Str,const char * __restrict__ _Delim);
swprintf	MSVCRT$swprintf	WINBASEAPI int __cdecl MSVCRT$swprintf(wchar_t *__stream, const wchar_t *__format, ...);
_swprintf	MSVCRT$_swprintf	WINBASEAPI int __cdecl MSVCRT$_swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
wcscat	MSVCRT$wcscat	WINBASEAPI wchar_t *__cdecl MSVCRT$wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source);
wcsncat	MSVCRT$wcsncat	WINBASEAPI wchar_t *__cdecl MSVCRT$wcsncat(wchar_t * __restrict__ _Dest, const wchar_t * __restrict__ _Source, size_t _Count);
_wcsicmp	MSVCRT$_wcsicmp	WINBASEAPI int __cdecl MSVCRT$_wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
wcscpy	MSVCRT$wcscpy	WINBASEAPI wchar_t *__cdecl MSVCRT$wcscpy(wchar_t * __restrict__ _Dest, const wchar_t * __restrict__ _Source);
wcscpy_s	MSVCRT$wcscpy_s	WINBASEAPI errno_t __cdecl MSVCRT$wcscpy_s(wchar_t *_Dst, rsize_t _DstSize, const wchar_t *_Src);
wcschr	MSVCRT$wcschr	WINBASEAPI _CONST_RETURN wchar_t *__cdecl MSVCRT$wcschr(const wchar_t *_Str, wchar_t _Ch);
wcsrchr	MSVCRT$wcsrchr	WINBASEAPI wchar_t *__cdecl MSVCRT$wcsrchr(const wchar_t *_Str,wchar_t _Ch);
wcslen	MSVCRT$wcslen	WINBASEAPI size_t __cdecl MSVCRT$wcslen(const wchar_t *_Str);
wcsstr	MSVCRT$wcsstr	WINBASEAPI wchar_t *__cdecl MSVCRT$wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
wcstok	MSVCRT$wcstok	WINBASEAPI wchar_t *__cdecl MSVCRT$wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim);
wcstoul	MSVCRT$wcstoul	WINBASEAPI unsigned long __cdecl MSVCRT$wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
_wtol	MSVCRT$_wtol	WINBASEAPI long __cdecl MSVCRT$_wtol(const wchar_t * str);
srand	MSVCRT$srand	DECLSPEC_IMPORT void __cdecl MSVCRT$srand(unsigned int _Seed);
rand	MSVCRT$rand	DECLSPEC_IMPORT int __cdecl MSVCRT$rand(void);
_time32	MSVCRT$_time32	_CRTIMP __time32_t __cdecl MSVCRT$_time32(__time32_t *_Time);
_snwprintf	MSVCRT$_snwprintf	WINBASEAPI int __cdecl MSVCRT$_snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...);
_time64	MSVCRT$_time64	_CRTIMP __time64_t __cdecl MSVCRT$_time64(__time64_t *_Time);
PathCombineW	SHLWAPI$PathCombineW	WINBASEAPI LPWSTR WINAPI SHLWAPI$PathCombineW(LPWSTR pszDest,LPCWSTR pszDir,LPCWSTR pszFile);
PathFileExistsW	SHLWAPI$PathFileExistsW	WINBASEAPI WINBOOL WINAPI SHLWAPI$PathFileExistsW(LPCWSTR pszPath);
StrStrA	SHLWAPI$StrStrA	WINBASEAPI LPSTR WINAPI SHLWAPI$StrStrA(LPCSTR lpFirst,LPCSTR lpSrch);
ShellExecuteExW	SHELL32$ShellExecuteExW	WINBASEAPI WINBOOL WINAPI SHELL32$ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo);
DnsQuery_A	DNSAPI$DnsQuery_A	WINBASEAPI DNS_STATUS WINAPI DNSAPI$DnsQuery_A(PCSTR,WORD,DWORD,PIP4_ARRAY,PDNS_RECORD*,PVOID*);
DnsFree	DNSAPI$DnsFree	WINBASEAPI VOID WINAPI DNSAPI$DnsFree(PVOID pData,DNS_FREE_TYPE FreeType);
inet_addr	WSOCK32$inet_addr	WINBASEAPI unsigned long WINAPI WSOCK32$inet_addr(const char *cp);
htonl	WS2_32$htonl	WINBASEAPI u_long WINAPI WS2_32$htonl(u_long hostlong);
htons	WS2_32$htons	WINBASEAPI u_short WINAPI WS2_32$htons(u_short hostshort);
inet_ntoa	WS2_32$inet_ntoa	WINBASEAPI char * WINAPI WS2_32$inet_ntoa(struct in_addr in);
InetNtopW	WS2_32$InetNtopW	WINBASEAPI LPCWSTR WINAPI WS2_32$InetNtopW(INT Family, LPCVOID pAddr, LPWSTR pStringBuf, size_t StringBufSIze);
inet_pton	WS2_32$inet_pton	WINBASEAPI INT WINAPI WS2_32$inet_pton(INT Family, LPCSTR pStringBuf, PVOID pAddr);
WSAStartup	WS2_32$WSAStartup	WINBASEAPI int WINAPI WS2_32$WSAStartup(WORD wVersionRequested,LPWSADATA lpWSAData);
WSAGetLastError	WS2_32$WSAGetLastError	WINBASEAPI int WINAPI WS2_32$WSAGetLastError(void);
socket	WS2_32$socket	WINBASEAPI int WINAPI WS2_32$socket(int af,int type,int protocol);
setsockopt	WS2_32$setsockopt	WINBASEAPI int WINAPI WS2_32$setsockopt(SOCKET s,int level,int optname,const char *optval,int optlen);
sendto	WS2_32$sendto	WINBASEAPI int WINAPI WS2_32$sendto(SOCKET s,const char *buf,int len,int flags,const struct sockaddr *to,int tolen);
recvfrom	WS2_32$recvfrom	WINBASEAPI int WINAPI WS2_32$recvfrom(SOCKET s,char *buf,int len,int flags,struct sockaddr *from,int *fromlen);
closesocket	WS2_32$closesocket	WINBASEAPI int WINAPI WS2_32$closesocket(SOCKET s);
WSACleanup	WS2_32$WSACleanup	WINBASEAPI int WINAPI WS2_32$WSACleanup(void);
ntohs	WS2_32$ntohs	WINBASEAPI int WINAPI WS2_32$ntohs(u_short netshort);
DsGetDcNameA	NETAPI32$DsGetDcNameA	WINBASEAPI DWORD WINAPI NETAPI32$DsGetDcNameA(LPCSTR ComputerName,LPCSTR DomainName,GUID *DomainGuid,LPCSTR SiteName,ULONG Flags,PDOMAIN_CONTROLLER_INFOA *DomainControllerInfo);
DsGetDcNameW	NETAPI32$DsGetDcNameW	WINBASEAPI DWORD WINAPI NETAPI32$DsGetDcNameW(LPCWSTR ComputerName,LPCWSTR DomainName,GUID *DomainGuid,LPCWSTR SiteName,ULONG Flags,PDOMAIN_CONTROLLER_INFOW *DomainControllerInfo);
NetUserGetInfo	NETAPI32$NetUserGetInfo	WINBASEAPI DWORD WINAPI NETAPI32$NetUserGetInfo(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE *bufptr);
NetUserModalsGet	NETAPI32$NetUserModalsGet	WINBASEAPI DWORD WINAPI NETAPI32$NetUserModalsGet(LPCWSTR servername,DWORD level,LPBYTE *bufptr);
NetServerEnum	NETAPI32$NetServerEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetServerEnum(LMCSTR servername,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,DWORD servertype,LMCSTR domain,LPDWORD resume_handle);
NetUserGetGroups	NETAPI32$NetUserGetGroups	WINBASEAPI DWORD WINAPI NETAPI32$NetUserGetGroups(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries);
NetUserGetLocalGroups	NETAPI32$NetUserGetLocalGroups	WINBASEAPI DWORD WINAPI NETAPI32$NetUserGetLocalGroups(LPCWSTR servername,LPCWSTR username,DWORD level,DWORD flags,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries);
NetApiBufferFree	NETAPI32$NetApiBufferFree	WINBASEAPI DWORD WINAPI NETAPI32$NetApiBufferFree(LPVOID Buffer);
NetGetAnyDCName	NETAPI32$NetGetAnyDCName	WINBASEAPI DWORD WINAPI NETAPI32$NetGetAnyDCName(LPCWSTR servername,LPCWSTR domainname,LPBYTE *bufptr);
NetUserEnum	NETAPI32$NetUserEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetUserEnum(LPCWSTR servername,DWORD level,DWORD filter,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle);
NetGroupGetUsers	NETAPI32$NetGroupGetUsers	WINBASEAPI DWORD WINAPI NETAPI32$NetGroupGetUsers(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR ResumeHandle);
NetQueryDisplayInformation	NETAPI32$NetQueryDisplayInformation	WINBASEAPI DWORD WINAPI NETAPI32$NetQueryDisplayInformation(LPCWSTR ServerName,DWORD Level,DWORD Index,DWORD EntriesRequested,DWORD PreferredMaximumLength,LPDWORD ReturnedEntryCount,PVOID *SortedBuffer);
NetLocalGroupEnum	NETAPI32$NetLocalGroupEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetLocalGroupEnum(LPCWSTR servername,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR resumehandle);
NetLocalGroupGetMembers	NETAPI32$NetLocalGroupGetMembers	WINBASEAPI DWORD WINAPI NETAPI32$NetLocalGroupGetMembers(LPCWSTR servername,LPCWSTR localgroupname,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR resumehandle);
NetLocalGroupAddMembers	NETAPI32$NetLocalGroupAddMembers	WINBASEAPI DWORD WINAPI NETAPI32$NetLocalGroupAddMembers(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE buf,DWORD totalentries);
NetUserSetInfo	NETAPI32$NetUserSetInfo	WINBASEAPI DWORD WINAPI NETAPI32$NetUserSetInfo(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE buf,LPDWORD parm_err);
NetShareEnum	NETAPI32$NetShareEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetShareEnum(LMSTR servername,DWORD level,LPBYTE *bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle);
NetSessionEnum	NETAPI32$NetSessionEnum	WINBASEAPI DWORD WINAPI NETAPI32$NetSessionEnum(LPCWSTR servername, LPCWSTR UncClientName, LPCWSTR username, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle);
NetApiBufferFree	NETAPI32$NetApiBufferFree	WINBASEAPI DWORD WINAPI NETAPI32$NetApiBufferFree(LPVOID Buffer);
NetGroupAddUser	NETAPI32$NetGroupAddUser	WINBASEAPI DWORD WINAPI NETAPI32$NetGroupAddUser(LPCWSTR servername,LPCWSTR GroupName,LPCWSTR userName);
NetGroupAddUser	NETAPI32$NetGroupAddUser	WINBASEAPI DWORD WINAPI NETAPI32$NetGroupAddUser(LPCWSTR servername,LPCWSTR GroupName,LPCWSTR userName);
NetUserAdd	NETAPI32$NetUserAdd	WINBASEAPI DWORD WINAPI NETAPI32$NetUserAdd(LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
WNetOpenEnumW	MPR$WNetOpenEnumW	WINBASEAPI DWORD WINAPI MPR$WNetOpenEnumW(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum);
WNetEnumResourceW	MPR$WNetEnumResourceW	WINBASEAPI DWORD WINAPI MPR$WNetEnumResourceW(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize);
WNetCloseEnum	MPR$WNetCloseEnum	WINBASEAPI DWORD WINAPI MPR$WNetCloseEnum(HANDLE hEnum);
WNetGetNetworkInformationW	MPR$WNetGetNetworkInformationW	WINBASEAPI DWORD WINAPI MPR$WNetGetNetworkInformationW(LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct);
WNetGetConnectionW	MPR$WNetGetConnectionW	WINBASEAPI DWORD WINAPI MPR$WNetGetConnectionW(LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength);
WNetGetResourceInformationW	MPR$WNetGetResourceInformationW	WINBASEAPI DWORD WINAPI MPR$WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR *lplpSystem);
WNetGetUserW	MPR$WNetGetUserW	WINBASEAPI DWORD WINAPI MPR$WNetGetUserW(LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength);
WNetAddConnection2W	MPR$WNetAddConnection2W	WINBASEAPI DWORD WINAPI MPR$WNetAddConnection2W(LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags);
WNetCancelConnection2W	MPR$WNetCancelConnection2W	WINBASEAPI DWORD WINAPI MPR$WNetCancelConnection2W(LPCWSTR lpName, DWORD dwFlags, BOOL fForce);
CharPrevW	USER32$CharPrevW	WINUSERAPI LPWSTR WINAPI USER32$CharPrevW(LPCWSTR lpszStart,LPCWSTR lpszCurrent);
DdeInitializeA	USER32$DdeInitializeA	WINUSERAPI UINT WINAPI USER32$DdeInitializeA(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes);
DdeConnectList	USER32$DdeConnectList	WINUSERAPI HCONVLIST WINAPI USER32$DdeConnectList(DWORD idInst,HSZ hszService,HSZ hszTopic,HCONVLIST hConvList,PCONVCONTEXT pCC);
DdeDisconnectList	USER32$DdeDisconnectList	WINUSERAPI WINBOOL WINAPI USER32$DdeDisconnectList(HCONVLIST hConvList);
DdeUninitialize	USER32$DdeUninitialize	WINUSERAPI WINBOOL WINAPI USER32$DdeUninitialize(DWORD idInst);
EnumDesktopWindows	USER32$EnumDesktopWindows	WINUSERAPI int WINAPI USER32$EnumDesktopWindows(HDESK hDesktop,WNDENUMPROC lpfn,LPARAM lParam);
EnumWindows	USER32$EnumWindows	WINUSERAPI WINBOOL WINAPI USER32$EnumWindows(WNDENUMPROC lpEnumFunc,LPARAM lParam);
FindWindowA	USER32$FindWindowA	WINUSERAPI HWND WINAPI USER32$FindWindowA(LPCSTR lpszClass,LPCSTR lpszWindow);
FindWindowExA	USER32$FindWindowExA	WINUSERAPI HWND WINAPI USER32$FindWindowExA(HWND hWndParent,HWND hWndChildAfter,LPCSTR lpszClass,LPCSTR lpszWindow);
GetClassNameA	USER32$GetClassNameA	WINUSERAPI int WINAPI USER32$GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount);
GetPropA	USER32$GetPropA	WINUSERAPI HANDLE WINAPI USER32$GetPropA(HWND hWnd,LPCSTR lpString);
GetWindowLongA	USER32$GetWindowLongA	WINUSERAPI LONG WINAPI USER32$GetWindowLongA(HWND hWnd,int nIndex);
GetWindowLongPtrA	USER32$GetWindowLongPtrA	WINUSERAPI LONG_PTR WINAPI USER32$GetWindowLongPtrA(HWND hWnd,int nIndex);
GetWindowTextA	USER32$GetWindowTextA	WINUSERAPI int WINAPI USER32$GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount);
GetWindowThreadProcessId	USER32$GetWindowThreadProcessId	WINUSERAPI DWORD WINAPI USER32$GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId);
IsWindowVisible	USER32$IsWindowVisible	WINUSERAPI int WINAPI USER32$IsWindowVisible(HWND hWnd);
PostMessageA	USER32$PostMessageA	WINUSERAPI WINBOOL WINAPI USER32$PostMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
SendMessageA	USER32$SendMessageA	WINUSERAPI LRESULT WINAPI USER32$SendMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
SetPropA	USER32$SetPropA	WINUSERAPI BOOL WINAPI USER32$SetPropA(HWND hWnd,LPCSTR lpString,HANDLE hData);
SetWindowLongA	USER32$SetWindowLongA	WINUSERAPI LONG WINAPI USER32$SetWindowLongA(HWND hWnd,int nIndex, LONG dwNewLong);
SetWindowLongPtrA	USER32$SetWindowLongPtrA	WINUSERAPI LONG_PTR WINAPI USER32$SetWindowLongPtrA(HWND hWnd,int nIndex, LONG_PTR dwNewLong);
EnumerateSecurityPackagesA	SSPICLI$EnumerateSecurityPackagesA	WINBASEAPI DWORD WINAPI SSPICLI$EnumerateSecurityPackagesA(unsigned long*, PSecPkgInfoA*);
FreeContextBuffer	SSPICLI$FreeContextBuffer	WINBASEAPI SECURITY_STATUS WINAPI SSPICLI$FreeContextBuffer(void *pvContextBuffer);
GetUserNameExA	SECUR32$GetUserNameExA	WINBASEAPI BOOLEAN WINAPI SECUR32$GetUserNameExA (int NameFormat, LPSTR lpNameBuffer, PULONG nSize);
GetUserNameExW	SECUR32$GetUserNameExW	WINBASEAPI BOOLEAN WINAPI SECUR32$GetUserNameExW (int NameFormat, LPWSTR lpNameBuffer, PULONG nSize);
GetComputerObjectNameW	SECUR32$GetComputerObjectNameW	WINBASEAPI BOOLEAN WINAPI SECUR32$GetComputerObjectNameW (int NameFormat, LPWSTR lpNameBuffer, PULONG nSize);
FreeCredentialsHandle	SECUR32$FreeCredentialsHandle	WINBASEAPI SECURITY_STATUS WINAPI SECUR32$FreeCredentialsHandle(PCredHandle phCredential);
AcquireCredentialsHandleA	SECUR32$AcquireCredentialsHandleA	WINBASEAPI DWORD WINAPI SECUR32$AcquireCredentialsHandleA(LPSTR, LPSTR, unsigned long, void*, void*, SEC_GET_KEY_FN, void *, PCredHandle, PTimeStamp);
InitializeSecurityContextA	SECUR32$InitializeSecurityContextA	WINBASEAPI DWORD WINAPI SECUR32$InitializeSecurityContextA(PCredHandle, PCtxtHandle, SEC_CHAR*, unsigned long, unsigned long, unsigned long, PSecBufferDesc, unsigned long, PCtxtHandle, PSecBufferDesc, unsigned long *, PTimeStamp);
InitializeSecurityContextW	SECUR32$InitializeSecurityContextW	WINBASEAPI DWORD WINAPI SECUR32$InitializeSecurityContextW(PCredHandle, PCtxtHandle, SEC_WCHAR*, unsigned long, unsigned long, unsigned long, PSecBufferDesc, unsigned long, PCtxtHandle, PSecBufferDesc, unsigned long *, PTimeStamp);
AcceptSecurityContext	SECUR32$AcceptSecurityContext	WINBASEAPI DWORD WINAPI SECUR32$AcceptSecurityContext(PCredHandle, PCtxtHandle, PSecBufferDesc, unsigned long, unsigned long, PCtxtHandle, PSecBufferDesc, unsigned long *, PTimeStamp);
DeleteSecurityContext	SECUR32$DeleteSecurityContext	WINBASEAPI SECURITY_STATUS WINAPI SECUR32$DeleteSecurityContext(PCtxtHandle phContext);
AcquireCredentialsHandleA	SECUR32$AcquireCredentialsHandleA	WINBASEAPI DWORD WINAPI SECUR32$AcquireCredentialsHandleA(LPSTR, LPSTR, unsigned long, void*, void*, SEC_GET_KEY_FN, void *, PCredHandle, PTimeStamp);
AcceptSecurityContext	SECUR32$AcceptSecurityContext	WINBASEAPI DWORD WINAPI SECUR32$AcceptSecurityContext(PCredHandle, PCtxtHandle, PSecBufferDesc, unsigned long, unsigned long, PCtxtHandle, PSecBufferDesc, unsigned long *, PTimeStamp);
LsaConnectUntrusted	SECUR32$LsaConnectUntrusted	WINBASEAPI DWORD WINAPI SECUR32$LsaConnectUntrusted(PHANDLE);
LsaDeregisterLogonProcess	SECUR32$LsaDeregisterLogonProcess	WINBASEAPI NTSTATUS NTAPI SECUR32$LsaDeregisterLogonProcess(HANDLE LsaHandle);
LsaFreeReturnBuffer	SECUR32$LsaFreeReturnBuffer	WINBASEAPI NTSTATUS NTAPI SECUR32$LsaFreeReturnBuffer (PVOID Buffer);
LsaLookupAuthenticationPackage	SECUR32$LsaLookupAuthenticationPackage	WINBASEAPI DWORD WINAPI SECUR32$LsaLookupAuthenticationPackage(HANDLE, PLSA_STRING, PULONG);
LsaCallAuthenticationPackage	SECUR32$LsaCallAuthenticationPackage	WINBASEAPI DWORD WINAPI SECUR32$LsaCallAuthenticationPackage(HANDLE, ULONG, PVOID, ULONG, PVOID*, PULONG, PNTSTATUS);
GetFileVersionInfoA	VERSION$GetFileVersionInfoA	WINBASEAPI WINBOOL WINAPI VERSION$GetFileVersionInfoA(LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
GetFileVersionInfoW	VERSION$GetFileVersionInfoW	WINBASEAPI WINBOOL WINAPI VERSION$GetFileVersionInfoW(LPCWSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
GetFileVersionInfoSizeA	VERSION$GetFileVersionInfoSizeA	WINBASEAPI DWORD WINAPI VERSION$GetFileVersionInfoSizeA(LPCSTR lptstrFilenamea ,LPDWORD lpdwHandle);
GetFileVersionInfoSizeW	VERSION$GetFileVersionInfoSizeW	WINBASEAPI DWORD WINAPI VERSION$GetFileVersionInfoSizeW(LPCWSTR lptstrFilename,LPDWORD lpdwHandle);
VerQueryValueA	VERSION$VerQueryValueA	WINBASEAPI WINBOOL WINAPI VERSION$VerQueryValueA(LPCVOID pBlock, LPCSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen);
VerQueryValueW	VERSION$VerQueryValueW	WINBASEAPI WINBOOL WINAPI VERSION$VerQueryValueW(LPCVOID pBlock,LPCWSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
FilterUnload	FLTLIB$FilterUnload	HRESULT WINAPI FLTLIB$FilterUnload(LPCWSTR lpFilterName);
LookupAccountNameA	ADVAPI32$LookupAccountNameA	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupAccountNameA (LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
GetUserNameA	ADVAPI32$GetUserNameA	WINADVAPI WINBOOL WINAPI ADVAPI32$GetUserNameA (LPSTR lpBuffer, LPDWORD pcbBuffer);
ImpersonateLoggedOnUser	ADVAPI32$ImpersonateLoggedOnUser	WINADVAPI WINBOOL WINAPI ADVAPI32$ImpersonateLoggedOnUser (HANDLE hToken);
LogonUserA	ADVAPI32$LogonUserA	WINADVAPI WINBOOL WINAPI ADVAPI32$LogonUserA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
LogonUserW	ADVAPI32$LogonUserW	WINADVAPI WINBOOL WINAPI ADVAPI32$LogonUserW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
DuplicateTokenEx	ADVAPI32$DuplicateTokenEx	WINADVAPI WINBOOL WINAPI ADVAPI32$DuplicateTokenEx (HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
AdjustTokenPrivileges	ADVAPI32$AdjustTokenPrivileges	WINADVAPI WINBOOL WINAPI ADVAPI32$AdjustTokenPrivileges (HANDLE TokenHandle, WINBOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
CreateProcessAsUserW	ADVAPI32$CreateProcessAsUserW	WINADVAPI WINBOOL WINAPI ADVAPI32$CreateProcessAsUserW (HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
CreateProcessWithLogonW	ADVAPI32$CreateProcessWithLogonW	WINADVAPI WINBOOL WINAPI ADVAPI32$CreateProcessWithLogonW (LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
CreateProcessWithTokenW	ADVAPI32$CreateProcessWithTokenW	WINADVAPI WINBOOL WINAPI ADVAPI32$CreateProcessWithTokenW (HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
OpenProcessToken	ADVAPI32$OpenProcessToken	WINADVAPI WINBOOL WINAPI ADVAPI32$OpenProcessToken (HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
OpenThreadToken	ADVAPI32$OpenThreadToken	WINADVAPI WINBOOL WINAPI ADVAPI32$OpenThreadToken (HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle);
GetTokenInformation	ADVAPI32$GetTokenInformation	WINADVAPI WINBOOL WINAPI ADVAPI32$GetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
ConvertSidToStringSidA	ADVAPI32$ConvertSidToStringSidA	WINADVAPI WINBOOL WINAPI ADVAPI32$ConvertSidToStringSidA(PSID Sid,LPSTR *StringSid);
ConvertSidToStringSidW	ADVAPI32$ConvertSidToStringSidW	WINADVAPI WINBOOL WINAPI ADVAPI32$ConvertSidToStringSidW(PSID Sid,LPWSTR *StringSid);
LookupAccountSidA	ADVAPI32$LookupAccountSidA	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupAccountSidA (LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
LookupAccountSidW	ADVAPI32$LookupAccountSidW	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupAccountSidW (LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
LookupPrivilegeNameA	ADVAPI32$LookupPrivilegeNameA	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupPrivilegeNameA (LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
LookupPrivilegeDisplayNameA	ADVAPI32$LookupPrivilegeDisplayNameA	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupPrivilegeDisplayNameA (LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
LookupPrivilegeValueA	ADVAPI32$LookupPrivilegeValueA	WINADVAPI WINBOOL WINAPI ADVAPI32$LookupPrivilegeValueA (LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid);
GetFileSecurityW	ADVAPI32$GetFileSecurityW	WINADVAPI WINBOOL WINAPI ADVAPI32$GetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
MapGenericMask	ADVAPI32$MapGenericMask	WINADVAPI VOID WINAPI ADVAPI32$MapGenericMask (PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
LsaNtStatusToWinError	ADVAPI32$LsaNtStatusToWinError	WINADVAPI ULONG WINAPI ADVAPI32$LsaNtStatusToWinError(NTSTATUS);
CredMarshalCredentialW	ADVAPI32$CredMarshalCredentialW	WINADVAPI WINBOOL WINAPI ADVAPI32$CredMarshalCredentialW(CRED_MARSHAL_TYPE CredType,PVOID Credential,LPWSTR *MarshaledCredential);
CredFree	ADVAPI32$CredFree	WINADVAPI VOID WINAPI ADVAPI32$CredFree (PVOID Buffer);
InitializeSecurityDescriptor	ADVAPI32$InitializeSecurityDescriptor	WINADVAPI WINBOOL WINAPI ADVAPI32$InitializeSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
SetSecurityDescriptorDacl	ADVAPI32$SetSecurityDescriptorDacl	WINADVAPI WINBOOL WINAPI ADVAPI32$SetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bDaclPresent, PACL pDacl, WINBOOL bDaclDefaulted);
ConvertSecurityDescriptorToStringSecurityDescriptorW	ADVAPI32$ConvertSecurityDescriptorToStringSecurityDescriptorW	WINADVAPI WINBOOL WINAPI ADVAPI32$ConvertSecurityDescriptorToStringSecurityDescriptorW(PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD RequestedStringSDRevision,SECURITY_INFORMATION SecurityInformation,LPWSTR *StringSecurityDescriptor,PULONG StringSecurityDescriptorLen);
GetSecurityDescriptorOwner	ADVAPI32$GetSecurityDescriptorOwner	WINADVAPI WINBOOL WINAPI ADVAPI32$GetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted);
GetSecurityDescriptorDacl	ADVAPI32$GetSecurityDescriptorDacl	WINADVAPI WINBOOL WINAPI ADVAPI32$GetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted);
GetAclInformation	ADVAPI32$GetAclInformation	WINADVAPI WINBOOL WINAPI ADVAPI32$GetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
GetAce	ADVAPI32$GetAce	WINADVAPI WINBOOL WINAPI ADVAPI32$GetAce (PACL pAcl, DWORD dwAceIndex, LPVOID *pAce);
OpenSCManagerA	ADVAPI32$OpenSCManagerA	WINADVAPI SC_HANDLE WINAPI ADVAPI32$OpenSCManagerA(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess);
OpenSCManagerW	ADVAPI32$OpenSCManagerW	WINADVAPI SC_HANDLE WINAPI ADVAPI32$OpenSCManagerW(LPCWSTR lpMachineName,LPCWSTR lpDatabaseName,DWORD dwDesiredAccess);
OpenServiceA	ADVAPI32$OpenServiceA	WINADVAPI SC_HANDLE WINAPI ADVAPI32$OpenServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess);
OpenServiceW	ADVAPI32$OpenServiceW	WINADVAPI SC_HANDLE WINAPI ADVAPI32$OpenServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,DWORD dwDesiredAccess);
CreateServiceA	ADVAPI32$CreateServiceA	WINADVAPI SC_HANDLE WINAPI ADVAPI32$CreateServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword);
QueryServiceStatus	ADVAPI32$QueryServiceStatus	WINADVAPI WINBOOL WINAPI ADVAPI32$QueryServiceStatus(SC_HANDLE hService,LPSERVICE_STATUS lpServiceStatus);
QueryServiceConfigA	ADVAPI32$QueryServiceConfigA	WINADVAPI WINBOOL WINAPI ADVAPI32$QueryServiceConfigA(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGA lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
CloseServiceHandle	ADVAPI32$CloseServiceHandle	WINADVAPI WINBOOL WINAPI ADVAPI32$CloseServiceHandle(SC_HANDLE hSCObject);
EnumServicesStatusExA	ADVAPI32$EnumServicesStatusExA	WINADVAPI WINBOOL WINAPI ADVAPI32$EnumServicesStatusExA(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCSTR pszGroupName);
EnumServicesStatusExW	ADVAPI32$EnumServicesStatusExW	WINADVAPI WINBOOL WINAPI ADVAPI32$EnumServicesStatusExW(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCWSTR pszGroupName);
EnumDependentServicesA	ADVAPI32$EnumDependentServicesA	WINADVAPI WINBOOL WINAPI ADVAPI32$EnumDependentServicesA(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
QueryServiceStatusEx	ADVAPI32$QueryServiceStatusEx	WINADVAPI WINBOOL WINAPI ADVAPI32$QueryServiceStatusEx(SC_HANDLE hService,SC_STATUS_TYPE InfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
QueryServiceConfig2A	ADVAPI32$QueryServiceConfig2A	WINADVAPI WINBOOL WINAPI ADVAPI32$QueryServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
ChangeServiceConfig2A	ADVAPI32$ChangeServiceConfig2A	WINADVAPI WINBOOL WINAPI ADVAPI32$ChangeServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
ChangeServiceConfigA	ADVAPI32$ChangeServiceConfigA	WINADVAPI WINBOOL WINAPI ADVAPI32$ChangeServiceConfigA(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword,LPCSTR lpDisplayName);
StartServiceA	ADVAPI32$StartServiceA	WINADVAPI WINBOOL WINAPI ADVAPI32$StartServiceA(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCSTR *lpServiceArgVectors);
ControlService	ADVAPI32$ControlService	WINADVAPI WINBOOL WINAPI ADVAPI32$ControlService(SC_HANDLE hService,DWORD dwControl,LPSERVICE_STATUS lpServiceStatus);
DeleteService	ADVAPI32$DeleteService	WINADVAPI WINBOOL WINAPI ADVAPI32$DeleteService(SC_HANDLE hService);
RegCloseKey	ADVAPI32$RegCloseKey	WINADVAPI LONG WINAPI ADVAPI32$RegCloseKey(HKEY hKey);
RegConnectRegistryA	ADVAPI32$RegConnectRegistryA	WINADVAPI LONG WINAPI ADVAPI32$RegConnectRegistryA(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult);
RegCopyTreeA	ADVAPI32$RegCopyTreeA	WINADVAPI LONG WINAPI ADVAPI32$RegCopyTreeA(HKEY src, LPCSTR subkey, HKEY dst);
RegCreateKeyA	ADVAPI32$RegCreateKeyA	WINADVAPI LONG WINAPI ADVAPI32$RegCreateKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
RegCreateKeyExA	ADVAPI32$RegCreateKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegCreateKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
RegCreateKeyExW	ADVAPI32$RegCreateKeyExW	WINADVAPI LONG WINAPI ADVAPI32$RegCreateKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
RegDeleteKeyExA	ADVAPI32$RegDeleteKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteKeyExA(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
RegDeleteKeyExW	ADVAPI32$RegDeleteKeyExW	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteKeyExW(HKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
RegDeleteKeyValueA	ADVAPI32$RegDeleteKeyValueA	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteKeyValueA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpValueName);
RegDeleteKeyValueW	ADVAPI32$RegDeleteKeyValueW	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteKeyValueW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpValueName);
RegDeleteTreeA	ADVAPI32$RegDeleteTreeA	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteTreeA(HKEY base, LPCSTR subkey);
RegDeleteTreeW	ADVAPI32$RegDeleteTreeW	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteTreeW(HKEY base, LPCWSTR subkey);
RegDeleteValueA	ADVAPI32$RegDeleteValueA	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteValueA(HKEY hKey,LPCSTR lpValueName);
RegDeleteValueW	ADVAPI32$RegDeleteValueW	WINADVAPI LONG WINAPI ADVAPI32$RegDeleteValueW(HKEY hKey,LPCWSTR lpValueName);
RegEnumKeyExA	ADVAPI32$RegEnumKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegEnumKeyExA(HKEY hKey,DWORD dwIndex,LPSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
RegEnumValueA	ADVAPI32$RegEnumValueA	WINADVAPI LONG WINAPI ADVAPI32$RegEnumValueA(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
RegOpenKeyA	ADVAPI32$RegOpenKeyA	WINADVAPI LONG WINAPI ADVAPI32$RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
RegOpenKeyExA	ADVAPI32$RegOpenKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegOpenKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
RegOpenKeyExW	ADVAPI32$RegOpenKeyExW	WINADVAPI LONG WINAPI ADVAPI32$RegOpenKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
RegQueryInfoKeyA	ADVAPI32$RegQueryInfoKeyA	WINADVAPI LONG WINAPI ADVAPI32$RegQueryInfoKeyA(HKEY hKey,LPSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
RegQueryValueExA	ADVAPI32$RegQueryValueExA	WINADVAPI LONG WINAPI ADVAPI32$RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
RegQueryValueExW	ADVAPI32$RegQueryValueExW	WINADVAPI LONG WINAPI ADVAPI32$RegQueryValueExW(HKEY hKey,LPCWSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
RegSaveKeyExA	ADVAPI32$RegSaveKeyExA	WINADVAPI LONG WINAPI ADVAPI32$RegSaveKeyExA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
RegSetValueExA	ADVAPI32$RegSetValueExA	WINADVAPI LONG WINAPI ADVAPI32$RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,CONST BYTE *lpData,DWORD cbData);
RegSetValueExW	ADVAPI32$RegSetValueExW	WINADVAPI LONG WINAPI ADVAPI32$RegSetValueExW(HKEY hKey,LPCWSTR lpValueName,DWORD Reserved,DWORD dwType,CONST BYTE *lpData,DWORD cbData);
InitiateSystemShutdownExA	ADVAPI32$InitiateSystemShutdownExA	WINADVAPI WINBOOL WINAPI ADVAPI32$InitiateSystemShutdownExA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason);
NtCreateFile	NTDLL$NtCreateFile	WINBASEAPI NTSTATUS NTAPI NTDLL$NtCreateFile(PHANDLE FileHandle,ACCESS_MASK DesiredAccess,POBJECT_ATTRIBUTES ObjectAttributes,PIO_STATUS_BLOCK IoStatusBlock,PLARGE_INTEGER AllocationSize,ULONG FileAttributes,ULONG ShareAccess,ULONG CreateDisposition,ULONG CreateOptions,PVOID EaBuffer,ULONG EaLength);
NtClose	NTDLL$NtClose	WINBASEAPI NTSTATUS NTAPI NTDLL$NtClose(HANDLE Handle);
NtRenameKey	NTDLL$NtRenameKey	WINBASEAPI NTSTATUS NTAPI NTDLL$NtRenameKey(HANDLE keyHandle, PUNICODE_STRING New_Name);
NtQueueApcThread	NTDLL$NtQueueApcThread	WINBASEAPI NTSTATUS NTAPI NTDLL$NtQueueApcThread(_In_ HANDLE ThreadHandle, _In_ PVOID ApcRoutine, _In_ PVOID ApcRoutineContext OPTIONAL, _In_ PVOID ApcStatusBlock OPTIONAL, _In_ ULONG ApcReserved OPTIONAL);
ImageEnumerateCertificates	IMAGEHLP$ImageEnumerateCertificates	WINBASEAPI WINBOOL IMAGEAPI IMAGEHLP$ImageEnumerateCertificates(HANDLE FileHandle,WORD TypeFilter,PDWORD CertificateCount,PDWORD Indices,DWORD IndexCount);
ImageGetCertificateHeader	IMAGEHLP$ImageGetCertificateHeader	WINBASEAPI WINBOOL IMAGEAPI IMAGEHLP$ImageGetCertificateHeader(HANDLE FileHandle,DWORD CertificateIndex,LPWIN_CERTIFICATE Certificateheader);
ImageGetCertificateData	IMAGEHLP$ImageGetCertificateData	WINBASEAPI WINBOOL IMAGEAPI IMAGEHLP$ImageGetCertificateData(HANDLE FileHandle,DWORD CertificateIndex,LPWIN_CERTIFICATE Certificate,PDWORD RequiredLength);
CryptVerifyMessageSignature	CRYPT32$CryptVerifyMessageSignature	WINBASEAPI WINBOOL WINAPI CRYPT32$CryptVerifyMessageSignature (PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppSignerCert);
CertGetNameStringW	CRYPT32$CertGetNameStringW	WINBASEAPI DWORD WINAPI CRYPT32$CertGetNameStringW (PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPWSTR pszNameString, DWORD cchNameString);
CertFreeCertificateContext	CRYPT32$CertFreeCertificateContext	WINBASEAPI WINBOOL WINAPI CRYPT32$CertFreeCertificateContext (PCCERT_CONTEXT pCertContext);
CryptUnprotectData	CRYPT32$CryptUnprotectData	WINBASEAPI BOOL WINAPI CRYPT32$CryptUnprotectData(DATA_BLOB *, LPWSTR *, DATA_BLOB *, PVOID, CRYPTPROTECT_PROMPTSTRUCT *, DWORD, DATA_BLOB *);
CryptEncodeObjectEx	CRYPT32$CryptEncodeObjectEx	WINIMPM WINBOOL WINAPI CRYPT32$CryptEncodeObjectEx (DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, DWORD dwFlags, PCRYPT_ENCODE_PARA pEncodePara, void *pvEncoded, DWORD *pcbEncoded);
CryptBinaryToStringW	CRYPT32$CryptBinaryToStringW	WINIMPM WINBOOL WINAPI CRYPT32$CryptBinaryToStringW (CONST BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD *pcchString);
PFXImportCertStore	CRYPT32$PFXImportCertStore	WINIMPM HCERTSTORE WINAPI CRYPT32$PFXImportCertStore (CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags);
CertEnumCertificatesInStore	CRYPT32$CertEnumCertificatesInStore	WINIMPM PCCERT_CONTEXT WINAPI CRYPT32$CertEnumCertificatesInStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pPrevCertContext);
CertGetCertificateContextProperty	CRYPT32$CertGetCertificateContextProperty	WINIMPM WINBOOL WINAPI CRYPT32$CertGetCertificateContextProperty (PCCERT_CONTEXT pCertContext, DWORD dwPropId, void *pvData, DWORD *pcbData);
CertAddCertificateContextToStore	CRYPT32$CertAddCertificateContextToStore	WINIMPM WINBOOL WINAPI CRYPT32$CertAddCertificateContextToStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext);
CertOpenStore	CRYPT32$CertOpenStore	WINIMPM HCERTSTORE WINAPI CRYPT32$CertOpenStore (LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const void *pvPara);
CertCloseStore	CRYPT32$CertCloseStore	WINIMPM WINBOOL WINAPI CRYPT32$CertCloseStore (HCERTSTORE hCertStore, DWORD dwFlags);
CertDeleteCertificateFromStore	CRYPT32$CertDeleteCertificateFromStore	WINIMPM WINBOOL WINAPI CRYPT32$CertDeleteCertificateFromStore (PCCERT_CONTEXT pCertContext);
CryptBinaryToStringA	CRYPT32$CryptBinaryToStringA	WINIMPM WINBOOL WINAPI CRYPT32$CryptBinaryToStringA (CONST BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPSTR pszString, DWORD *pcchString);
CertCreateCertificateContext	CRYPT32$CertCreateCertificateContext	WINIMPM PCCERT_CONTEXT WINAPI CRYPT32$CertCreateCertificateContext (DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded);
CertFindCertificateInStore	CRYPT32$CertFindCertificateInStore	WINIMPM PCCERT_CONTEXT WINAPI CRYPT32$CertFindCertificateInStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCERT_CONTEXT pPrevCertContext);
DnsFree	DNSAPI$DnsFree	WINBASEAPI VOID WINAPI DNSAPI$DnsFree(PVOID pData,DNS_FREE_TYPE FreeType);
DnsGetCacheDataTable	DNSAPI$DnsGetCacheDataTable	WINBASEAPI int WINAPI DNSAPI$DnsGetCacheDataTable(PVOID data);
CoInitializeEx	OLE32$CoInitializeEx	WINBASEAPI HRESULT WINAPI OLE32$CoInitializeEx (LPVOID pvReserved, DWORD dwCoInit);
CoUninitialize	OLE32$CoUninitialize	WINBASEAPI HRESULT WINAPI OLE32$CoUninitialize (void);
CoInitializeSecurity	OLE32$CoInitializeSecurity	WINBASEAPI HRESULT WINAPI OLE32$CoInitializeSecurity (PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3);
CoCreateInstance	OLE32$CoCreateInstance	WINBASEAPI HRESULT WINAPI OLE32$CoCreateInstance (REFCLSID rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, REFIID riid, LPVOID *ppv);
CLSIDFromString	OLE32$CLSIDFromString	WINBASEAPI HRESULT WINAPI OLE32$CLSIDFromString (LPCOLESTR lpsz, LPCLSID pclsid);
IIDFromString	OLE32$IIDFromString	WINBASEAPI HRESULT WINAPI OLE32$IIDFromString (LPCOLESTR lpsz, LPIID lpiid);
StringFromGUID2	OLE32$StringFromGUID2	WINBASEAPI int WINAPI OLE32$StringFromGUID2 (REFGUID rguid, LPOLESTR lpsz, int cchMax);
CoSetProxyBlanket	OLE32$CoSetProxyBlanket	WINBASEAPI HRESULT WINAPI OLE32$CoSetProxyBlanket(IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
CoTaskMemAlloc	OLE32$CoTaskMemAlloc	WINBASEAPI LPVOID WINAPI OLE32$CoTaskMemAlloc(SIZE_T cb);
CoTaskMemFree	OLE32$CoTaskMemFree	WINBASEAPI void WINAPI OLE32$CoTaskMemFree(LPVOID pv);
SysAllocString	OLEAUT32$SysAllocString	WINBASEAPI BSTR WINAPI OLEAUT32$SysAllocString(const OLECHAR *);
SysReAllocString	OLEAUT32$SysReAllocString	WINBASEAPI INT WINAPI OLEAUT32$SysReAllocString(BSTR *, const OLECHAR *);
SysStringLen	OLEAUT32$SysStringLen	WINBASEAPI UINT WINAPI OLEAUT32$SysStringLen(BSTR);
SysAllocStringByteLen	OLEAUT32$SysAllocStringByteLen	WINBASEAPI BSTR WINAPI OLEAUT32$SysAllocStringByteLen(LPCSTR psz,UINT len);
SysStringByteLen	OLEAUT32$SysStringByteLen	WINBASEAPI UINT WINAPI OLEAUT32$SysStringByteLen(BSTR bstr);
SysFreeString	OLEAUT32$SysFreeString	WINBASEAPI void WINAPI OLEAUT32$SysFreeString(BSTR);
VariantInit	OLEAUT32$VariantInit	WINBASEAPI void WINAPI OLEAUT32$VariantInit(VARIANTARG *pvarg);
VariantClear	OLEAUT32$VariantClear	WINBASEAPI void WINAPI OLEAUT32$VariantClear(VARIANTARG *pvarg);
SysAddRefString	OLEAUT32$SysAddRefString	WINBASEAPI HRESULT WINAPI OLEAUT32$SysAddRefString(BSTR);
VariantChangeType	OLEAUT32$VariantChangeType	WINBASEAPI HRESULT WINAPI OLEAUT32$VariantChangeType(VARIANTARG *pvargDest, VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt);
VarFormatDateTime	OLEAUT32$VarFormatDateTime	WINBASEAPI void WINAPI OLEAUT32$VarFormatDateTime(LPVARIANT pvarIn,int iNamedFormat,ULONG dwFlags,BSTR *pbstrOut);
SafeArrayDestroy	OLEAUT32$SafeArrayDestroy	WINBASEAPI void WINAPI OLEAUT32$SafeArrayDestroy(SAFEARRAY *psa);
SafeArrayLock	OLEAUT32$SafeArrayLock	WINBASEAPI HRESULT WINAPI OLEAUT32$SafeArrayLock(SAFEARRAY *psa);
SafeArrayGetLBound	OLEAUT32$SafeArrayGetLBound	WINBASEAPI HRESULT WINAPI OLEAUT32$SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound);
SafeArrayGetUBound	OLEAUT32$SafeArrayGetUBound	WINBASEAPI HRESULT WINAPI OLEAUT32$SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound);
SafeArrayGetElement	OLEAUT32$SafeArrayGetElement	WINBASEAPI HRESULT WINAPI OLEAUT32$SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv);
SafeArrayGetElemsize	OLEAUT32$SafeArrayGetElemsize	WINBASEAPI UINT WINAPI OLEAUT32$SafeArrayGetElemsize(SAFEARRAY *psa);
MiniDumpWriteDump	DBGHELP$MiniDumpWriteDump	WINBASEAPI WINBOOL WINAPI DBGHELP$MiniDumpWriteDump(HANDLE hProcess,DWORD ProcessId,HANDLE hFile,MINIDUMP_TYPE DumpType,CONST PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam,CONST PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,CONST PMINIDUMP_CALLBACK_INFORMATION CallbackParam);
ldap_init	WLDAP32$ldap_init	WINLDAPAPI LDAP* LDAPAPI WLDAP32$ldap_init(PSTR, ULONG);
ldap_bind_s	WLDAP32$ldap_bind_s	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_bind_s(LDAP *ld,const PSTR dn,const PCHAR cred,ULONG method);
ldap_search_s	WLDAP32$ldap_search_s	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_search_s(LDAP *ld,PSTR base,ULONG scope,PSTR filter,PZPSTR attrs,ULONG attrsonly,PLDAPMessage *res);
ldap_count_entries	WLDAP32$ldap_count_entries	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_count_entries(LDAP*,LDAPMessage*);
ldap_get_values_lenA	WLDAP32$ldap_get_values_lenA	WINLDAPAPI struct berval **LDAPAPI WLDAP32$ldap_get_values_lenA (LDAP *ExternalHandle,LDAPMessage *Message,const PCHAR attr);
ldap_value_free_len	WLDAP32$ldap_value_free_len	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_value_free_len(struct berval **vals);
ldap_first_entry	WLDAP32$ldap_first_entry	WINLDAPAPI LDAPMessage* LDAPAPI WLDAP32$ldap_first_entry(LDAP *ld,LDAPMessage *res);
ldap_next_entry	WLDAP32$ldap_next_entry	WINLDAPAPI LDAPMessage* LDAPAPI WLDAP32$ldap_next_entry(LDAP*,LDAPMessage*);
ldap_first_attribute	WLDAP32$ldap_first_attribute	WINLDAPAPI PCHAR LDAPAPI WLDAP32$ldap_first_attribute(LDAP *ld,LDAPMessage *entry,BerElement **ptr);
ldap_count_values	WLDAP32$ldap_count_values	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_count_values(PCHAR);
ldap_get_values	WLDAP32$ldap_get_values	WINLDAPAPI PCHAR * LDAPAPI WLDAP32$ldap_get_values(LDAP *ld,LDAPMessage *entry,const PSTR attr);
ldap_value_free	WLDAP32$ldap_value_free	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_value_free(PCHAR *);
ldap_next_attribute	WLDAP32$ldap_next_attribute	WINLDAPAPI PCHAR LDAPAPI WLDAP32$ldap_next_attribute(LDAP *ld,LDAPMessage *entry,BerElement *ptr);
ber_free	WLDAP32$ber_free	WINLDAPAPI VOID LDAPAPI WLDAP32$ber_free(BerElement *pBerElement,INT fbuf);
ldap_memfree	WLDAP32$ldap_memfree	WINLDAPAPI VOID LDAPAPI WLDAP32$ldap_memfree(PCHAR);
ldap_unbind	WLDAP32$ldap_unbind	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_unbind(LDAP*);
ldap_unbind_s	WLDAP32$ldap_unbind_s	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_unbind_s(LDAP*);
ldap_msgfree	WLDAP32$ldap_msgfree	WINLDAPAPI ULONG LDAPAPI WLDAP32$ldap_msgfree(LDAPMessage*);
UuidToStringA	RPCRT4$UuidToStringA	RPCRTAPI RPC_STATUS RPC_ENTRY RPCRT4$UuidToStringA(UUID *Uuid,RPC_CSTR *StringUuid);
RpcStringFreeA	RPCRT4$RpcStringFreeA	RPCRTAPI RPC_STATUS RPC_ENTRY RPCRT4$RpcStringFreeA(RPC_CSTR *String);
EnumProcesses	PSAPI$EnumProcesses	WINBOOL WINAPI PSAPI$EnumProcesses(DWORD *lpidProcess,DWORD cb,DWORD *cbNeeded);
EnumProcessModules	PSAPI$EnumProcessModules	WINBOOL WINAPI PSAPI$EnumProcessModules(HANDLE hProcess,HMODULE *lphModule,DWORD cb,LPDWORD lpcbNeeded);
GetModuleBaseNameW	PSAPI$GetModuleBaseNameW	DWORD WINAPI PSAPI$GetModuleBaseNameW(HANDLE hProcess,HMODULE hModule,LPWSTR lpBaseName,DWORD nSize);
inet_ntop	WS2_32$inet_ntop	DECLSPEC_IMPORT PCSTR WINAPI WS2_32$inet_ntop(INT Family,const VOID *pAddr,PSTR pStringBuf,size_t StringBufSize);
ntohl	WS2_32$ntohl	DECLSPEC_IMPORT ULONG WINAPI WS2_32$ntohl(ULONG netlong);
malloc	MSVCRT$malloc	WINBASEAPI void* WINAPI MSVCRT$malloc(SIZE_T);
IcmpSendEcho	IPHLPAPI$IcmpSendEcho	DECLSPEC_IMPORT DWORD WINAPI IPHLPAPI$IcmpSendEcho(HANDLE IcmpHandle,IPAddr DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout);
IcmpCreateFile	IPHLPAPI$IcmpCreateFile	DECLSPEC_IMPORT HANDLE WINAPI IPHLPAPI$IcmpCreateFile();
IcmpCloseHandle	IPHLPAPI$IcmpCloseHandle	DECLSPEC_IMPORT BOOL WINAPI IPHLPAPI$IcmpCloseHandle(HANDLE IcmpHandle);
isspace	MSVCRT$isspace	WINBASEAPI int __cdecl MSVCRT$isspace(int _C);
recv	WS2_32$recv	WINBASEAPI int WINAPI WS2_32$recv(SOCKET s, char *buf, int len, int flags);
